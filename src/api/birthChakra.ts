import solarData from "./solar.json";
import lunarData from "./lunar.json";

function convertDateToJulian(dateString: string): string {
    const date = new Date(dateString);
    const year = date.getFullYear();
    const start = new Date(year, 0, 0);
    const diff = date.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    const dayOfYear = Math.floor(diff / oneDay);
    return `${year}-${String(dayOfYear).padStart(3, "0")}`;
}

export function getBirthChakra(dateOfBirth: string) {
    let debugLogs = [];

    debugLogs.push(`üîπ –í—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${dateOfBirth}`);

    const searchDate = convertDateToJulian(dateOfBirth);
    debugLogs.push(`üìÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ${searchDate}`);

    const solarEntry = solarData.find((entry: { Date: string }) => entry.Date === searchDate);
    const lunarEntry = lunarData.find((entry: { Date: string }) => entry.Date === searchDate);

    debugLogs.push(`üåû –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –°–æ–ª–Ω—Ü–∞: ${solarEntry ? JSON.stringify(solarEntry) : "‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}`);
    debugLogs.push(`üåô –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –õ—É–Ω—ã: ${lunarEntry ? JSON.stringify(lunarEntry) : "‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}`);

    if (!solarEntry || !lunarEntry) {
        debugLogs.push("üö® –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö!");
        return {
            result: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö",
            logs: debugLogs
        };
    }

    debugLogs.push(`‚úÖ –ò—Ç–æ–≥: –ì—Ä–∞–¥—É—Å—ã –°–æ–ª–Ω—Ü–∞: ${solarEntry.Solar_Longitude} | –ì—Ä–∞–¥—É—Å—ã –õ—É–Ω—ã: ${lunarEntry.Lunar_Longitude}`);

    return {
        result: {
            sunDegree: solarEntry.Solar_Longitude,
            moonDegree: lunarEntry.Lunar_Longitude
        },
        logs: debugLogs
    };
}
