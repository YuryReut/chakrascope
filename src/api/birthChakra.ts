import chakrasData from "./chakras.json";
import solarData from "./solar.json";
import lunarData from "./lunar.json";

export function getBirthChakra(dateOfBirth: string) {
    let debugLogs: string[] = [];

    debugLogs.push(`üîπ –í—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${dateOfBirth}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-DOY (–≥–¥–µ DOY ‚Äî –¥–µ–Ω—å –≤ –≥–æ–¥—É)
    const birthDate = new Date(dateOfBirth);
    const year = birthDate.getFullYear();
    const startOfYear = new Date(year, 0, 0);
    const dayOfYear = Math.floor((birthDate.getTime() - startOfYear.getTime()) / 86400000);
    const formattedDate = `${year}-${String(dayOfYear).padStart(3, "0")}`;

    debugLogs.push(`üìÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ${formattedDate}`);

    const solarEntry = solarData.find(entry => entry.Date === formattedDate);
    const lunarEntry = lunarData.find(entry => entry.Date === formattedDate);

    debugLogs.push(`üåû –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –°–æ–ª–Ω—Ü–∞: ${solarEntry ? JSON.stringify(solarEntry) : "‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}`);
    debugLogs.push(`üåô –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –õ—É–Ω—ã: ${lunarEntry ? JSON.stringify(lunarEntry) : "‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}`);

    if (!solarEntry || !lunarEntry) {
        debugLogs.push("üö® –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö!");
        return {
            result: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö",
            logs: debugLogs
        };
    }

    const sunDegree = solarEntry.Solar_Longitude;
    const moonDegree = lunarEntry.Lunar_Longitude;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞–∫—Ä—É –ø–æ –°–æ–ª–Ω—Ü—É –∏ —Ñ–∞–∑—É –ø–æ –õ—É–Ω–µ (7 —á–∞–∫—Ä —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ 360 –≥—Ä–∞–¥—É—Å–∞–º)
    const chakraId = Math.floor((sunDegree / 360) * 7) + 1;
    const phaseId = Math.floor((moonDegree / 360) * 4) + 1;

    const chakra = chakrasData.chakras.find(c => c.id === chakraId);
    const phase = chakra?.phases.find(p => p.id === phaseId);

    if (!chakra || !phase) {
        debugLogs.push("üö® –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞–∫—Ä—É –∏–ª–∏ —Ñ–∞–∑—É!");
        return {
            result: "–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞",
            logs: debugLogs
        };
    }

    debugLogs.push(`‚úÖ –ò—Ç–æ–≥: –ß–∞–∫—Ä–∞ ${chakraId} (${chakra.name} - ${chakra.title}), –§–∞–∑–∞ ${phaseId}`);
    debugLogs.push(`üåÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ—â—É—â–µ–Ω–∏–µ: ${phase.inner}`);
    debugLogs.push(`üåç –í–Ω–µ—à–Ω–µ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ: ${phase.outer}`);
    debugLogs.push(`‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è: ${phase.relationship}`);

    return {
        result: {
            chakra: chakraId,
            name: chakra.name,
            title: chakra.title,
            phase: phaseId,
            inner: phase.inner,
            outer: phase.outer,
            relationship: phase.relationship
        },
        logs: debugLogs
    };
}
