import solarDataRaw from "./solar.json";
import lunarDataRaw from "./lunar.json";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
interface ChakraEntry {
    Date: string;
    Solar_Longitude?: number;
    Lunar_Longitude?: number;
}

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç)
const solarData: ChakraEntry[] = Array.isArray(solarDataRaw) ? solarDataRaw : Object.values(solarDataRaw);
const lunarData: ChakraEntry[] = Array.isArray(lunarDataRaw) ? lunarDataRaw : Object.values(lunarDataRaw);

export function getBirthChakra(dateOfBirth: string) {
    let debugLogs: string[] = [];

    debugLogs.push(`üîπ –í—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${dateOfBirth}`);

    const solarEntry = solarData.find(entry => entry.Date === dateOfBirth);
    const lunarEntry = lunarData.find(entry => entry.Date === dateOfBirth);

    debugLogs.push(`üåû –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –°–æ–ª–Ω—Ü–∞: ${solarEntry ? JSON.stringify(solarEntry) : "‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}`);
    debugLogs.push(`üåô –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –õ—É–Ω—ã: ${lunarEntry ? JSON.stringify(lunarEntry) : "‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}`);

    if (!solarEntry || !lunarEntry) {
        debugLogs.push("üö® –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö!");
        return {
            result: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö",
            logs: debugLogs
        };
    }

    const sunDegree = solarEntry.Solar_Longitude ?? "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
    const moonDegree = lunarEntry.Lunar_Longitude ?? "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";

    debugLogs.push(`‚úÖ –ò—Ç–æ–≥: –ì—Ä–∞–¥—É—Å—ã –°–æ–ª–Ω—Ü–∞: ${sunDegree} | –ì—Ä–∞–¥—É—Å—ã –õ—É–Ω—ã: ${moonDegree}`);

    return {
        result: {
            sunDegree,
            moonDegree
        },
        logs: debugLogs
    };
}
