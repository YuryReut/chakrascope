import chakrasData from "./chakras.json";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¢–∏—Ç—Ö–∏ (–õ—É–Ω–Ω–æ–≥–æ –¥–Ω—è)
function getCurrentTithi(lunarLongitude: number): number {
    return Math.floor(lunarLongitude / 12) + 1;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ß–∞–∫—Ä—ã –ø–æ –¢–∏—Ç—Ö–∏ (—Ä–∞–∑–±–∏–≤–∞–µ–º 30 –¢–∏—Ç—Ö–∏ –Ω–∞ 7 –ß–∞–∫—Ä)
function getChakraFromTithi(tithi: number): number {
    return Math.floor((tithi - 1) / 4.29) + 1;
}

// –ß–∞–∫—Ä–∞ –ø–æ 52-–¥–Ω–µ–≤–Ω–æ–º—É –±–∏–æ—Ä–∏—Ç–º—É
function getChakra52Cycle(birthDate: string, currentDate: string): number {
    const birth = new Date(birthDate);
    const now = new Date(currentDate);
    const daysPassed = Math.floor((now.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24));
    return Math.floor((daysPassed % 52) / 7.43) + 1;
}

// –ß–∞–∫—Ä–∞ –≥–æ–¥–∞ (–ø–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è)
function getChakraFromYear(date: string): number {
    const year = new Date(date).getFullYear();
    return ((year - 1950) % 7) + 1;
}

// –ß–∞–∫—Ä–∞ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ (–í–∞—Ä–∞)
function getChakraFromWeekday(date: string): number {
    const weekday = new Date(date).getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 = —Å—É–±–±–æ—Ç–∞
    return (weekday % 7) + 1;
}

// **üî• –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ß–∞–∫—Ä—ã –¥–Ω—è**
function getPersonalChakraDay(birthDate: string, currentDate: string, moonDegree: number): number {
    const yearChakra = getChakraFromYear(birthDate);
    const cycleChakra = getChakra52Cycle(birthDate, currentDate);
    const tithi = getCurrentTithi(moonDegree);
    const chakraTitthi = getChakraFromTithi(tithi);
    const chakraWeekday = getChakraFromWeekday(currentDate);
    const chakraMoon = getChakraFromTithi(Math.floor(moonDegree / 12) + 1);

    const chakraDay = Math.round(
        (yearChakra * 0.3) +
        (cycleChakra * 0.3) +
        (chakraTitthi * 0.2) +
        (chakraWeekday * 0.1) +
        (chakraMoon * 0.1)
    );

    return chakraDay > 7 ? 7 : chakraDay;
}

export function getBirthChakra(dateOfBirth: string, currentDate: string, sunDegree: number, moonDegree: number) {
    let debugLogs = [];

    debugLogs.push(`üîπ –í—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${dateOfBirth}`);

    const yearChakra = getChakraFromYear(dateOfBirth);
    const cycleChakra = getChakra52Cycle(dateOfBirth, currentDate);
    const tithi = getCurrentTithi(moonDegree);
    const lunarChakra = getChakraFromTithi(tithi);
    const solarChakra = getChakraFromTithi(Math.floor(sunDegree / 12) + 1);
    const chakraSun = chakrasData.chakras[solarChakra - 1];
    const chakraMoon = chakrasData.chakras[lunarChakra - 1];
    const dayChakra = getPersonalChakraDay(dateOfBirth, currentDate, moonDegree);

return {
    result: {
    birth: `üîÜ–¢–≤–æ–π –≥–ª–∞–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å ‚Äî ${chakraSun.emoji} ${solarChakra}-–π —á–∞–∫—Ä—ã ${chakraSun.title} (${chakraSun.name}).<br />
    üåÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ—â—É—â–µ–Ω–∏–µ: ${chakraSun.phases[0].inner} <br />
    üåç –ö–∞–∫ —ç—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∂–∏–∑–Ω–∏: ${chakraSun.phases[0].outer} <br />
    ‚ù§Ô∏è –í –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö: 
    <a 
        href="${chakraSun.link}" 
        target="_blank" 
        rel="noopener noreferrer" 
        style="color: inherit; text-decoration: none;"
    >
        ${chakraSun.phases[0].relationship}
    </a><br />
    üåô –¢–æ–Ω–∫–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º–∏—Ä–∞ ‚Äî —á–µ—Ä–µ–∑ ${chakraMoon.desc} –±–ª–∞–≥–æ–¥–∞—Ä—è ${chakraMoon.emoji} ${lunarChakra}-–π –ß–∞–∫—Ä–µ ${chakraMoon.title} (${chakraMoon.name}).
    `,

    currentPath: `üí´ –ì–ª–∞–≤–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –≥–æ–¥–∞: ${chakrasData.chakras[yearChakra - 1].desc} –∏–∑ ${chakrasData.chakras[yearChakra - 1].emoji} ${yearChakra}-–π –ß–∞–∫—Ä—ã ${chakrasData.chakras[yearChakra - 1].title} (${chakrasData.chakras[yearChakra - 1].name}).<br />
    üîÑ –ê –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ 52-–¥–Ω–µ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Ç—ã –∂–∏–≤–µ—à—å —á–µ—Ä–µ–∑ ${chakrasData.chakras[cycleChakra - 1].desc} —á–µ—Ä–µ–∑ ${chakrasData.chakras[cycleChakra - 1].emoji} ${cycleChakra}-—é –ß–∞–∫—Ä—É ${chakrasData.chakras[cycleChakra - 1].title} (${chakrasData.chakras[cycleChakra - 1].name}).`,

    today: `üî• –¢—ã —Å–µ–≥–æ–¥–Ω—è ‚Äî —ç—Ç–æ ${chakrasData.chakras[dayChakra - 1].desc} –∏–∑ ${chakrasData.chakras[dayChakra - 1].emoji} ${dayChakra}-–π –ß–∞–∫—Ä—ã ${chakrasData.chakras[dayChakra - 1].title} (${chakrasData.chakras[dayChakra - 1].name}).<br />
    üí´ –≠–º–æ—Ü–∏–∏ –¥–Ω—è ‚Äî ${chakrasData.chakras[lunarChakra - 1].desc}, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç–Ω–µ—Ä–≥–∏—è –≤ ${chakrasData.chakras[lunarChakra - 1].emoji} ${lunarChakra}-–æ–π –ß–∞–∫—Ä–µ ${chakrasData.chakras[lunarChakra - 1].title} (${chakrasData.chakras[lunarChakra - 1].name}).`
}
    logs: debugLogs
};}

export function analyzeQuery(answers: boolean[]) {
    const yearQuarter = getChakraFromYear(new Date().toISOString().split("T")[0]);

    let interpretation = "";
    let growthVector = "";
    let queryOrganicity: string[] = [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —á–∞–∫—Ä—ã –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const selectedChakras = answers
        .map((answer, index) => (answer ? index + 1 : null))
        .filter((index) => index !== null) as number[];

    if (selectedChakras.length === 1) {
        interpretation = "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—Å –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.";
    } else if (selectedChakras.length === 0) {
        interpretation = "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥.";
    } else {
        interpretation = "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—á–µ—Ç–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–µ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.";
    }

    let chakraMatches = 0;
    let movementDescriptions: string[] = [];
    
    selectedChakras.forEach((chakra) => {
        if (chakra === yearQuarter) {
            movementDescriptions.push("–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏");
            chakraMatches++;
        } else if (chakra === yearQuarter + 1) {
            movementDescriptions.push("–≤–µ–¥–µ—Ç –≤–∞—Å –≤–ø–µ—Ä–µ–¥ –ø–æ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è");
            chakraMatches++;
        } else if (chakra === yearQuarter - 1) {
            movementDescriptions.push("–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –∫ –ø—Ä–æ—à–ª—ã–º —ç–Ω–µ—Ä–≥–∏—è–º");
        } else {
            movementDescriptions.push("–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏");
        }
    });

    if (movementDescriptions.length > 0) {
        growthVector = `–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å ${movementDescriptions.join(", ")}.`;
    } else {
        growthVector = "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–µ–Ω, –Ω–æ –æ–Ω —É–≤–æ–¥–∏—Ç –≤–∞—Å –≤ —Å—Ç–æ—Ä–æ–Ω—É.";
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º queryOrganicity –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä–∞–∑
    selectedChakras.forEach((chakra) => {
        if (chakra === yearQuarter) {
            queryOrganicity.push("–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π");
        } else if (chakra === yearQuarter + 1) {
            queryOrganicity.push("–ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è");
        } else if (chakra === yearQuarter - 1) {
            queryOrganicity.push("—Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ—à–ª—ã–º –æ–ø—ã—Ç–æ–º");
        } else {
            queryOrganicity.push("–Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏");
        }
    });

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    queryOrganicity = [...new Set(queryOrganicity)];

    return { interpretation, growthVector, queryOrganicity };
}
