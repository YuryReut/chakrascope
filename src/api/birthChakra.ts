import chakrasData from "../api/chakras.json";
import solarData from "../api/solar.json";
import lunarData from "../api/lunar.json";

export function getBirthChakra(dateOfBirth: string) {
    let debugLogs: string[] = [];
    debugLogs.push(`üîπ –í—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${dateOfBirth}`);

    // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ solar.json –∏ lunar.json
    const solarEntry = solarData.find(entry => entry.Date === dateOfBirth);
    const lunarEntry = lunarData.find(entry => entry.Date === dateOfBirth);

    if (!solarEntry || !lunarEntry) {
        debugLogs.push("üö® –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö!");
        return { result: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö", logs: debugLogs };
    }

    debugLogs.push(`üåû –ì—Ä–∞–¥—É—Å—ã –°–æ–ª–Ω—Ü–∞: ${solarEntry.Solar_Longitude}`);
    debugLogs.push(`üåô –ì—Ä–∞–¥—É—Å—ã –õ—É–Ω—ã: ${lunarEntry.Lunar_Longitude}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞–∫—Ä—ã –∏ —Ñ–∞–∑—ã
    const sunChakra = getChakraAndPhase(solarEntry.Solar_Longitude);
    const moonChakra = getChakraAndPhase(lunarEntry.Lunar_Longitude);

    debugLogs.push(`‚úÖ –ß–∞–∫—Ä–∞ –°–æ–ª–Ω—Ü–∞: ${sunChakra.chakra}, —Ñ–∞–∑–∞ ${sunChakra.phase}`);
    debugLogs.push(`‚úÖ –ß–∞–∫—Ä–∞ –õ—É–Ω—ã: ${moonChakra.chakra}, —Ñ–∞–∑–∞ ${moonChakra.phase}`);

    return {
        result: {
            sun: sunChakra,
            moon: moonChakra
        },
        logs: debugLogs
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–∞–∫—Ä—ã –∏ —Ñ–∞–∑—ã
function getChakraAndPhase(degree: number) {
    const chakraIndex = Math.floor(degree / 51.4286); // 360¬∞ / 7 —á–∞–∫—Ä
    const padaIndex = Math.floor((degree % 51.4286) / (51.4286 / 4)); // 4 –ø–∞–¥—ã

    const chakra = chakrasData.chakras[chakraIndex]; // –ë–µ—Ä—ë–º —á–∞–∫—Ä—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
    const phase = chakra.phases[padaIndex]; // –§–∞–∑–∞ –ø–æ –ø–∞–¥–µ

    return {
        chakra: chakra.name,
        title: chakra.title,
        phase: padaIndex + 1,
        description: {
            inner: phase.inner,
            outer: phase.outer,
            relationship: phase.relationship
        }
    };
}
