import chakrasData from "./chakras.json";
import solarActivity from "../api/solarActivityModel.json";
import kpIndex from "../api/kpIndex.json";

// üî∏ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –Ω–∞–∫—à–∞—Ç—Ä–∞ (1‚Äì27) ‚Üí —á–∞–∫—Ä–∞ (1‚Äì7)
export const nakshatraToChakra = [
  1, 1, 1,  // –ê—à–≤–∏–Ω–∏, –ë—Ö–∞—Ä–∞–Ω–∏, –ö—Ä–∏—Ç—Ç–∏–∫–∞
  2, 2, 2,  // –†–æ—Ö–∏–Ω–∏, –ú—Ä–∏–≥–∞—à–∏—Ä–∞, –ê—Ä–¥—Ä–∞
  3, 3, 3,  // –ü—É–Ω–∞—Ä–≤–∞—Å—É, –ü—É—à—å—è, –ê—à–ª–µ—à–∞
  4, 4, 4,  // –ú–∞–≥—Ö–∞, –ü—É—Ä–≤–∞–ø—Ö–∞–ª–≥—É–Ω–∏, –£—Ç—Ç–∞—Ä–∞–ø—Ö–∞–ª–≥—É–Ω–∏
  5, 5, 5,  // –•–∞—Å—Ç–∞, –ß–∏—Ç—Ä–∞, –°–≤–∞—Ç–∏
  6, 6, 6,  // –í–∏—à–∞–∫—Ö–∞, –ê–Ω—É—Ä–∞–¥—Ö–∞, –î–∂–µ—à—Ç—Ö–∞
  7, 7, 7,  // –ú—É–ª–∞, –ü—É—Ä–≤–∞—à–∞–¥—Ö–∞, –£—Ç—Ç–∞—Ä–∞—à–∞–¥—Ö–∞
  1, 1, 1   // –®—Ä–∞–≤–∞–Ω–∞, –î—Ö–∞–Ω–∏—à—Ç—Ö–∞, –®–∞—Ç–∞–±—Ö–∏—à–∞
];

// –ß–∞–∫—Ä–∞ –≥–æ–¥–∞ (–ø–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è)
function getChakraFromYear(date: string): number {
    const year = new Date(date).getFullYear();
    return ((year - 1950) % 7) + 1;
}


// **üî• –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ß–∞–∫—Ä—ã –¥–Ω—è**
export function getPersonalChakraDay(sunDegree: number): number {

  const sunNakshatraIndex = Math.floor(sunDegree / (360 / 27));
  const sunChakra = nakshatraToChakra[sunNakshatraIndex] || 1;

  return sunChakra;
}


export function getBirthChakra(dateOfBirth: string, sunDegree: number, moonDegree: number) {

  const sunNakshatraIndex = Math.floor(sunDegree / (360 / 27));
  const moonNakshatraIndex = Math.floor(moonDegree / (360 / 27));

  const solarChakra = nakshatraToChakra[sunNakshatraIndex] || 1;
  const lunarChakra = nakshatraToChakra[moonNakshatraIndex] || 1;

  // üî∏ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—è—Ç–Ω–∞—Ö –∏ –±—É—Ä—è—Ö
  const solarEntry = solarActivity.find(entry => entry.d === dateOfBirth);
  const kpEntry = kpIndex.find(entry => entry.d === dateOfBirth);

  const solarValue = solarEntry ? solarEntry.a : 0;
  const kpValue = kpEntry ? kpEntry.k : 0;

  const normSolar = Math.min(solarValue, 1);        // —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ
  const normKp = Math.min(kpValue / 9, 1);          // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0‚Äì1

  // üî∏ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É —á–∞–∫—Ä—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  let chakraPhaseIndex = 0; // 0 = balance, 1 = excess, 2 = block

  if ([1, 3, 5].includes(solarChakra)) {
    if (normSolar >= 0.66) chakraPhaseIndex = 1;       // excess
    else if (normSolar <= 0.33) chakraPhaseIndex = 2;  // block
  } else if ([2, 4, 6].includes(solarChakra)) {
    if (normKp >= 0.66) chakraPhaseIndex = 1;
    else if (normKp <= 0.33) chakraPhaseIndex = 2;
  } else {
    chakraPhaseIndex = 0; // –¥–ª—è 7 —á–∞–∫—Ä—ã ‚Äî –≤—Å–µ–≥–¥–∞ balance (–∏–ª–∏ –º–æ–∂–µ—à—å –∏–Ω–∞—á–µ —Ä–µ—à–∏—Ç—å)
  }

  const chakraSun = chakrasData.chakras[solarChakra - 1];
  const chakraMoon = chakrasData.chakras[lunarChakra - 1];
  const chakraPhaseKeys = ['balance', 'excess', 'block'] as const;
  type PhaseKey = typeof chakraPhaseKeys[number];
  const chakraPhaseKey: PhaseKey = chakraPhaseKeys[chakraPhaseIndex];
  const chakraPhase = chakraSun.states[chakraPhaseKey];

  const yearChakra = getChakraFromYear(dateOfBirth);
  const dayChakra = getPersonalChakraDay(sunDegree);

  return {
    result: {
      birth: {
        chakraNumber: solarChakra,
        chakraEmoji: chakraSun.emoji,
        chakraTitle: chakraSun.title,
        chakraName: chakraSun.name,
        inner: chakraPhase.inner,
        outer: chakraPhase.outer,
        relationship: chakraPhase.relationship,
        link: chakraSun.link,
        lovelink: chakraSun.lovelink,
        lunarDescription: chakraMoon.desc,
        lunarEmoji: chakraMoon.emoji,
        lunarNumber: lunarChakra,
        lunarTitle: chakraMoon.title,
        lunarName: chakraMoon.name
      },
      currentPath: chakrasData.chakras[yearChakra - 1].path,
      today: `${chakrasData.chakras[dayChakra - 1].name} –∏ ${chakrasData.chakras[lunarChakra - 1].name}`,
      todayText: chakrasData.chakras[dayChakra - 1].day
    }
  };
}


export function analyzeQuery(answers: boolean[]) {
    const yearQuarter = getChakraFromYear(new Date().toISOString().split("T")[0]);

    let interpretation = "";
    let growthVector = "";
    let queryOrganicity: string[] = [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —á–∞–∫—Ä—ã –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const selectedChakras = answers
        .map((answer, index) => (answer ? index + 1 : null))
        .filter((index) => index !== null) as number[];

    if (selectedChakras.length === 1) {
        interpretation = "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—Å –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.";
    } else if (selectedChakras.length === 0) {
        interpretation = "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥.";
    } else {
        interpretation = "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—á–µ—Ç–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–µ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.";
    }

    let chakraMatches = 0;
    let movementDescriptions: string[] = [];
    
    selectedChakras.forEach((chakra) => {
        if (chakra === yearQuarter) {
            movementDescriptions.push("–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏");
            chakraMatches++;
        } else if (chakra === yearQuarter + 1) {
            movementDescriptions.push("–≤–µ–¥–µ—Ç –≤–∞—Å –≤–ø–µ—Ä–µ–¥ –ø–æ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è");
            chakraMatches++;
        } else if (chakra === yearQuarter - 1) {
            movementDescriptions.push("–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –∫ –ø—Ä–æ—à–ª—ã–º —ç–Ω–µ—Ä–≥–∏—è–º");
        } else {
            movementDescriptions.push("–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏");
        }
    });

    if (movementDescriptions.length > 0) {
        growthVector = `–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å ${movementDescriptions.join(", ")}.`;
    } else {
        growthVector = "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–µ–Ω, –Ω–æ –æ–Ω —É–≤–æ–¥–∏—Ç –≤–∞—Å –≤ —Å—Ç–æ—Ä–æ–Ω—É.";
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º queryOrganicity –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä–∞–∑
    selectedChakras.forEach((chakra) => {
        if (chakra === yearQuarter) {
            queryOrganicity.push("–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π");
        } else if (chakra === yearQuarter + 1) {
            queryOrganicity.push("–ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è");
        } else if (chakra === yearQuarter - 1) {
            queryOrganicity.push("—Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ—à–ª—ã–º –æ–ø—ã—Ç–æ–º");
        } else {
            queryOrganicity.push("–Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏");
        }
    });

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    queryOrganicity = [...new Set(queryOrganicity)];

    return { interpretation, growthVector, queryOrganicity };
}

