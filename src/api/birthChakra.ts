import chakrasData from "./chakras.json";
import dayEQ7Data from "./dayEQ7_data.json";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
type ChakraState = "balance" | "excess" | "block";
type EQ7Response = {
    solarAction: string;
    lunarPerception: string;
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¢–∏—Ç—Ö–∏ (–õ—É–Ω–Ω–æ–≥–æ –¥–Ω—è)
function getCurrentTithi(lunarLongitude: number): number {
    return Math.floor(lunarLongitude / 12) + 1;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ß–∞–∫—Ä—ã –ø–æ –¢–∏—Ç—Ö–∏
function getChakraFromTithi(tithi: number): number {
    return Math.floor((tithi - 1) / 4.29) + 1;
}

// –ß–∞–∫—Ä–∞ –ø–æ 52-–¥–Ω–µ–≤–Ω–æ–º—É –±–∏–æ—Ä–∏—Ç–º—É
function getChakra52Cycle(birthDate: string, currentDate: string): number {
    const birth = new Date(birthDate);
    const now = new Date(currentDate);
    const daysPassed = Math.floor((now.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24));
    return Math.floor((daysPassed % 52) / 7.43) + 1;
}

// –ß–∞–∫—Ä–∞ –≥–æ–¥–∞ (–ø–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è)
function getChakraFromYear(date: string): number {
    const year = new Date(date).getFullYear();
    return ((year - 1950) % 7) + 1;
}

// –ß–∞–∫—Ä–∞ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
function getChakraFromWeekday(date: string): number {
    const weekday = new Date(date).getDay();
    return (weekday % 7) + 1;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ß–∞–∫—Ä—ã –¥–Ω—è
function getPersonalChakraDay(birthDate: string, currentDate: string, moonDegree: number): number {
    const yearChakra = getChakraFromYear(birthDate);
    const cycleChakra = getChakra52Cycle(birthDate, currentDate);
    const tithi = getCurrentTithi(moonDegree);
    const chakraTitthi = getChakraFromTithi(tithi);
    const chakraWeekday = getChakraFromWeekday(currentDate);
    const chakraMoon = getChakraFromTithi(Math.floor(moonDegree / 12) + 1);

    const chakraDay = Math.round(
        (yearChakra * 0.3) +
        (cycleChakra * 0.3) +
        (chakraTitthi * 0.2) +
        (chakraWeekday * 0.1) +
        (chakraMoon * 0.1)
    );

    return chakraDay > 7 ? 7 : chakraDay;
}

export function getBirthChakra(dateOfBirth: string, currentDate: string, sunDegree: number, moonDegree: number) {
    const yearChakra = getChakraFromYear(dateOfBirth);
    const cycleChakra = getChakra52Cycle(dateOfBirth, currentDate);
    const tithi = getCurrentTithi(moonDegree);
    const lunarChakra = getChakraFromTithi(tithi);
    const solarChakra = getChakraFromTithi(Math.floor(sunDegree / 12) + 1);
    const dayChakra = getPersonalChakraDay(dateOfBirth, currentDate, moonDegree);

    return {
        result: `
        üîÜ –¢—ã –¥–µ–π—Å—Ç–≤—É–µ—à—å –∏–∑ ${chakrasData.chakras[solarChakra - 1].emoji} ${solarChakra}-–π —á–∞–∫—Ä—ã ${chakrasData.chakras[solarChakra - 1].title}.
        üåô –õ—É–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî ${chakrasData.chakras[lunarChakra - 1].emoji} ${lunarChakra}-—è —á–∞–∫—Ä–∞.
        üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —á–∞–∫—Ä–∞ –¥–Ω—è ‚Äî ${chakrasData.chakras[dayChakra - 1].emoji} ${dayChakra}-—è —á–∞–∫—Ä–∞.
        `,
        solarChakra,
        lunarChakra
    };
}

export function analyzeEQ7Responses(solarChakra: number, lunarChakra: number, responses: boolean[]): EQ7Response {
    const solarState: ChakraState = responses.slice(0, 3).includes(true)
        ? (responses[0] ? "balance" : responses[1] ? "excess" : "block")
        : "balance";

    const lunarState: ChakraState = responses.slice(3, 6).includes(true)
        ? (responses[3] ? "balance" : responses[4] ? "excess" : "block")
        : "balance";

    return {
        solarAction: dayEQ7Data.chakras[solarChakra - 1].sun_recommendations[solarState] || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        lunarPerception: dayEQ7Data.chakras[lunarChakra - 1].moon_recommendations[lunarState] || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    };
}
