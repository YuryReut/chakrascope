import { useState } from "react";
import { getBirthChakra, analyzeQuery } from "../api/birthChakra";
import solarData from "../api/solar.json";
import lunarData from "../api/lunar.json";

function convertToJulianDate(dateString: string): string {
    const date = new Date(dateString);
    const start = new Date(date.getFullYear(), 0, 0);
    const diff = date.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    const dayOfYear = Math.floor(diff / oneDay);
    return `${date.getFullYear()}-${dayOfYear.toString().padStart(3, "0")}`;
}

const QUESTIONS = [
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –∂–∏–∑–Ω–∏?",
    "–û–Ω –∫–∞—Å–∞–µ—Ç—Å—è –≤–∞—à–∏—Ö —ç–º–æ—Ü–∏–π –∏ –∂–µ–ª–∞–Ω–∏–π?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Å–∏–ª—É –≤–æ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π?",
    "–û–Ω —Å–≤—è–∑–∞–Ω —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ –∏ —Å–µ—Ä–¥–µ—á–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞?",
    "–û–Ω –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –≤–∏–¥–µ–Ω–∏–µ?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ?"
];

function App() {
    const [birthDate, setBirthDate] = useState("");
    const [birthChakra, setBirthChakra] = useState<{
    birth: {
        chakraNumber: number;
        chakraEmoji: string;
        chakraTitle: string;
        chakraName: string;
        inner: string;
        outer: string;
        relationship: string;
        link: string;
        lovelink: string;
        lunarDescription: string;
        lunarEmoji: string;
        lunarNumber: number;
        lunarTitle: string;
        lunarName: string;
    };
    currentPath: string;
    today: string;
} | null>(null);
    const [showQuestions, setShowQuestions] = useState(false);
    const [answers, setAnswers] = useState(Array(QUESTIONS.length).fill(null));
    const [currentQuestion, setCurrentQuestion] = useState<number | null>(0);
    const [queryResult, setQueryResult] = useState<null | {
        interpretation: string;
        growthVector: string;
        queryOrganicity: string[];
    }>(null);
    const [questionConfirmed, setQuestionConfirmed] = useState(false);
    const [showAnalysis, setShowAnalysis] = useState(false);

    // üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ —ç–º–æ—Ü–∏–∏ –¥–Ω—è
    const [showEmotionDialog, setShowEmotionDialog] = useState(false);
    const [selectedEmotion, setSelectedEmotion] = useState<string | null>(null);
    const [emotionAnalysis, setEmotionAnalysis] = useState<string | null>(null);

    const handleCheckChakra = () => {
        const today = new Date().toISOString().split("T")[0];
        const formattedDate = convertToJulianDate(birthDate);

        const solarEntry = solarData.find(entry => entry.Date === formattedDate);
        const lunarEntry = lunarData.find(entry => entry.Date === formattedDate);

        if (!solarEntry || !lunarEntry) {
            setBirthChakra({ 
                  birth: {
                    chakraNumber: 0,
                    chakraEmoji: "‚ùå",
                    chakraTitle: "–û—à–∏–±–∫–∞",
                    chakraName: "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                    inner: "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã",
                    outer: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞",
                    relationship: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                    link: "#",
                    lovelink: "#",
                    lunarDescription: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                    lunarEmoji: "‚ùå",
                    lunarNumber: 0,
                    lunarTitle: "–û—à–∏–±–∫–∞",
                    lunarName: "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
                  }, 
                  currentPath: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö!", 
                  today: "" 
                });
            return;
        }

        const sunDegree = solarEntry.Solar_Longitude;
        const moonDegree = lunarEntry.Lunar_Longitude;

        const result = getBirthChakra(birthDate, today, sunDegree, moonDegree);
        setBirthChakra(result.result);
    };

    const startQuestionnaire = () => {
        setShowQuestions(true);
        setQuestionConfirmed(false);
        setCurrentQuestion(0);
        setAnswers(Array(QUESTIONS.length).fill(null));
        setShowAnalysis(false);
        setQueryResult(null);
    };

    const handleAnswer = (answer: boolean) => {
        if (currentQuestion !== null) {
            const newAnswers = [...answers];
            newAnswers[currentQuestion] = answer;
            setAnswers(newAnswers);

            if (currentQuestion < QUESTIONS.length - 1) {
                setCurrentQuestion(currentQuestion + 1);
            } else {
                setCurrentQuestion(null);
            }
        }
    };

    const handleGetAnswer = () => {
        const analysis = analyzeQuery(answers);
        setQueryResult(analysis);
        setShowAnalysis(true);
    };

    // üîπ –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ —ç–º–æ—Ü–∏–∏ –¥–Ω—è
    const startEmotionDialog = () => {
        setShowEmotionDialog(true);
        setSelectedEmotion(null);
        setEmotionAnalysis(null);
    };

    // üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–∏
    const handleEmotionSelect = (emotion: string) => {
        setSelectedEmotion(emotion);
        setEmotionAnalysis(`üî• –î–µ–π—Å—Ç–≤–∏—è –∫–∞–∫ ${emotion}. üí° –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–∞–∫ ${emotion}.`);
    };

    return (
        <div style={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            minHeight: "100vh",
            width: "100vw",
            textAlign: "center",
            fontFamily: "inherit",
            color: "black",
            padding: "20px",
            boxSizing: "border-box",
            backgroundColor: "#ffffff"
        }}>
            <div style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                textAlign: "center",
                maxWidth: "700px",
                margin: "20px auto",
                padding: "20px",
                backgroundColor: "#f5f5f5",
                borderRadius: "10px",
                boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)"
            }}>
                <h1>–ß–∞–∫—Ä–æ—Å–∫–æ–ø</h1>
                <p>–ß–∞–∫—Ä–æ—Å–∫–æ–ø ‚Äî —ç—Ç–æ —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –¥–≤–∏–∂–µ—Ç—Å—è —Ç–≤–æ—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è –∏ –∫–∞–∫–∏–µ —Å–∏–ª—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</p>
                <input type="date" value={birthDate} onChange={(e) => setBirthDate(e.target.value)} />
                <button onClick={handleCheckChakra}>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</button>

            {birthChakra && (
                <div>
                    {/* –ë–ª–æ–∫ 1 - –° —á–µ–º —Ç—ã –ø—Ä–∏—à–µ–ª –≤ –º–∏—Ä */}
                    <div style={{
                            backgroundColor: "#ffffff",
                            padding: "15px",
                            borderRadius: "8px",
                            boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                            marginBottom: "15px",
                            textAlign: "left"
                        }}>
                        <h4>üîÜ –° —á–µ–º —Ç—ã –ø—Ä–∏—à–µ–ª –≤ —ç—Ç–æ—Ç –º–∏—Ä:</h4>
                        <p>
                          üîÜ –¢–≤–æ–π –≥–ª–∞–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å ‚Äî {birthChakra.birth.chakraEmoji} {birthChakra.birth.chakraNumber}-–π —á–∞–∫—Ä—ã {birthChakra.birth.chakraTitle} <a 
                              href={birthChakra.birth.link} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              style={{ color: "inherit", textDecoration: "none" }}
                            >
                              –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </a>
                            ({birthChakra.birth.chakraName}).<br />
                          üåÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ—â—É—â–µ–Ω–∏–µ: {birthChakra.birth.inner}<br />
                          üåç –ö–∞–∫ —ç—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∂–∏–∑–Ω–∏: {birthChakra.birth.outer}<br />
                          ‚ù§Ô∏è –í –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö: {birthChakra.birth.relationship} <a 
                              href={birthChakra.birth.lovelink} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              style={{ color: "inherit", textDecoration: "none" }}
                            >
                              –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </a>
                          <br />
                          üåô –¢–æ–Ω–∫–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º–∏—Ä–∞ ‚Äî —á–µ—Ä–µ–∑ {birthChakra.birth.lunarDescription} –±–ª–∞–≥–æ–¥–∞—Ä—è {birthChakra.birth.lunarEmoji} {birthChakra.birth.lunarNumber}-–π –ß–∞–∫—Ä–µ {birthChakra.birth.lunarTitle} ({birthChakra.birth.lunarName}).
                        </p>
                    </div>
                    {/* –ë–ª–æ–∫ 2 - –°–µ–≥–æ–¥–Ω—è */}
                    <div style={{
                            backgroundColor: "#ffffff",
                            padding: "15px",
                            borderRadius: "8px",
                            boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                            marginBottom: "15px",
                            textAlign: "left"
                        }}>
                        <h4>üìÖ –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å –ø—Ä–æ —ç—Ç–æ:</h4>
                        <p>{birthChakra.today}</p>
                        <button onClick={startEmotionDialog}>–¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è</button>
                    </div>

                    {/* –ë–ª–æ–∫ 3 - –¢–≤–æ–π –ø—É—Ç—å —Å–µ–π—á–∞—Å */}
                    <div style={{
                            backgroundColor: "#ffffff",
                            padding: "15px",
                            borderRadius: "8px",
                            boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                            marginBottom: "15px",
                            textAlign: "left"
                        }}>
                        <h4>üõ§Ô∏è –¢–≤–æ–π –ø—É—Ç—å —Å–µ–π—á–∞—Å:</h4>
                        <p>{birthChakra.currentPath}</p>
                        <button onClick={startQuestionnaire}>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</button>
                    </div>
                </div>
            )}
            </div>    
            {/* üîπ –î–∏–∞–ª–æ–≥ "–¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è" */}
            {showEmotionDialog && (
                 <div style={{
                    position: "fixed",
                    top: "0",
                    left: "0",
                    width: "100vw",
                    height: "100vh",
                    backgroundColor: "rgba(0, 0, 0, 0.5)",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center"
                }}>
                    <div style={{
                        backgroundColor: "white",
                        padding: "20px",
                        borderRadius: "10px",
                        textAlign: "center"
                    }}>
                    <p>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º. –£—Ç–æ—á–Ω–∏, –∫–∞–∫ —Ç—ã –æ—â—É—â–∞–µ—à—å —Å–µ–±—è:</p>
                    <button onClick={() => handleEmotionSelect("—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ")}>–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ</button>
                    <button onClick={() => handleEmotionSelect("—Ä–∞–¥–æ—Å—Ç—å")}>–†–∞–¥–æ—Å—Ç—å</button>
                    <button onClick={() => handleEmotionSelect("–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ")}>–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ</button>
                    {selectedEmotion && <p>{emotionAnalysis}</p>}
                    <button onClick={() => setShowEmotionDialog(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
              </div>
            )}

            {/* üîπ –î–∏–∞–ª–æ–≥ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" */}
            {showQuestions && (
                <div style={{
                    position: "fixed",
                    top: "0",
                    left: "0",
                    width: "100vw",
                    height: "100vh",
                    backgroundColor: "rgba(0, 0, 0, 0.5)",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center"
                }}>
                    <div style={{
                        backgroundColor: "white",
                        padding: "20px",
                        borderRadius: "10px",
                        textAlign: "center"
                    }}>
                    {!questionConfirmed ? (
                        <>
                            <p>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.</p>
                            <button onClick={() => setQuestionConfirmed(true)}>–ì–æ—Ç–æ–≤–æ</button>
                        </>
                    ) : currentQuestion !== null ? (
                        <>
                            <p>{QUESTIONS[currentQuestion]}</p>
                            <button onClick={() => handleAnswer(true)}>–î–∞</button>
                            <button onClick={() => handleAnswer(false)}>–ù–µ—Ç</button>
                        </>
                    ) : !showAnalysis ? (
                        <>
                            <p>–í–∞—à –≤–æ–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω.</p>
                            <button onClick={handleGetAnswer}>–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
                        </>
                    ) : queryResult ? (
                        <div>
                            <p>üìú <b>–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Å–∞–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫:</b> {queryResult.interpretation}</p>
                            <p>üîÑ <b>–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ:</b> {queryResult.growthVector}</p>
                            <p>üå± <b>–î–ª—è –≤–∞—Å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:</b> {queryResult.queryOrganicity.join(", ")}</p>
                            <button onClick={() => setShowQuestions(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
                        </div>
                    ) : null}
                </div>
              </div>
            )}
        </div>
    );
}

export default App;
