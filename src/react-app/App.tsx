
import { useState } from "react";
import { getBirthChakra, analyzeQuery } from "../api/birthChakra";
import solarData from "../api/solar.json";
import lunarData from "../api/lunar.json";

function convertToJulianDate(dateString: string): string {
    const date = new Date(dateString);
    const start = new Date(date.getFullYear(), 0, 0);
    const diff = date.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    const dayOfYear = Math.floor(diff / oneDay);
    return `${date.getFullYear()}-${dayOfYear.toString().padStart(3, "0")}`;
}

const QUESTIONS = [
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –∂–∏–∑–Ω–∏?",
    "–û–Ω –∫–∞—Å–∞–µ—Ç—Å—è –≤–∞—à–∏—Ö —ç–º–æ—Ü–∏–π –∏ –∂–µ–ª–∞–Ω–∏–π?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Å–∏–ª—É –≤–æ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π?",
    "–û–Ω —Å–≤—è–∑–∞–Ω —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ –∏ —Å–µ—Ä–¥–µ—á–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞?",
    "–û–Ω –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –≤–∏–¥–µ–Ω–∏–µ?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ?"
];

function App() {
    const [birthDate, setBirthDate] = useState("");
    const [birthChakra, setBirthChakra] = useState<{
    birth: string;
    currentPath: string;
    today: string;
} | null>(null);
    const [showQuestions, setShowQuestions] = useState(false);
    const [answers, setAnswers] = useState(Array(QUESTIONS.length).fill(null));
    const [currentQuestion, setCurrentQuestion] = useState<number | null>(0);
    const [queryResult, setQueryResult] = useState<null | {
        interpretation: string;
        growthVector: string;
        queryOrganicity: string[];
    }>(null);
    const [questionConfirmed, setQuestionConfirmed] = useState(false);
    const [showAnalysis, setShowAnalysis] = useState(false);

    const handleCheckChakra = () => {
        const today = new Date().toISOString().split("T")[0];
        const formattedDate = convertToJulianDate(birthDate);

        const solarEntry = solarData.find(entry => entry.Date === formattedDate);
        const lunarEntry = lunarData.find(entry => entry.Date === formattedDate);

        if (!solarEntry || !lunarEntry) {
           setBirthChakra({ birth: "‚ùå –û—à–∏–±–∫–∞", currentPath: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö!", today: "" });
            return;
        }

        const sunDegree = solarEntry.Solar_Longitude;
        const moonDegree = lunarEntry.Lunar_Longitude;

        const result = getBirthChakra(birthDate, today, sunDegree, moonDegree);
        setBirthChakra(result.result);
    };

    const startQuestionnaire = () => {
        setShowQuestions(true);
        setQuestionConfirmed(false);
        setCurrentQuestion(0);
        setAnswers(Array(QUESTIONS.length).fill(null));
        setShowAnalysis(false);
        setQueryResult(null);
    };

    const handleAnswer = (answer: boolean) => {
        const newAnswers = [...answers];
        if (currentQuestion !== null) {
            newAnswers[currentQuestion] = answer;
            setAnswers(newAnswers);

            if (currentQuestion < QUESTIONS.length - 1) {
                setCurrentQuestion(currentQuestion + 1);
            } else {
                setCurrentQuestion(null); // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
            }
        }
    };

    const handleGetAnswer = () => {
        const analysis = analyzeQuery(answers);
        setQueryResult(analysis);
        setShowAnalysis(true);
    };

    return (
    <div style={{
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        minHeight: "100vh",
        width: "100vw",
        textAlign: "center",
        fontFamily: "inherit",
        color: "black",
        padding: "20px",
        boxSizing: "border-box",
        backgroundColor: "#ffffff"
    }}>
        <div style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            textAlign: "center",
            maxWidth: "700px",
            margin: "20px auto",
            padding: "20px",
            backgroundColor: "#f5f5f5",
            borderRadius: "10px",
            boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)"
        }}>
            <h1 style={{ fontSize: "2em", marginBottom: "10px" }}>–ß–∞–∫—Ä–æ—Å–∫–æ–ø</h1>
            <p style={{ fontSize: "1em", color: "#666", marginBottom: "20px" }}>
                –ß–∞–∫—Ä–æ—Å–∫–æ–ø ‚Äî —ç—Ç–æ —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç,  
                <a 
                    href="https://www.instagram.com/reel/DG_9shMhIVk/" 
                    target="_blank" 
                    rel="noopener noreferrer"
                    style={{ color: "#007bff", textDecoration: "none" }}
                >
                    –∫–∞–∫
                </a>  –¥–≤–∏–∂–µ—Ç—Å—è —Ç–≤–æ—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è –∏ –∫–∞–∫–∏–µ —Å–∏–ª—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
            </p>
            <div style={{ display: "flex", alignItems: "center", gap: "10px", marginBottom: "15px" }}>
                <label style={{ fontSize: "1em" }}>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
                <input type="date" value={birthDate} onChange={(e) => setBirthDate(e.target.value)} style={{ padding: "8px", fontSize: "1em", backgroundColor: "#ffffff" }} />
                <button onClick={handleCheckChakra} style={{ padding: "8px 16px", fontSize: "1em", cursor: "pointer" }}>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</button>
            </div>

            {birthChakra && (
               <div>
    {/* –ë–ª–æ–∫ 1 - –¢—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∫ */}
    <div style={{
        backgroundColor: "white",
        padding: "15px",
        borderRadius: "8px",
        boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
        marginBottom: "15px", // –£–≤–µ–ª–∏—á–∏–ª –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
        textAlign: "left"
    }}>
        <h4>üîÜ–° —á–µ–º —Ç—ã –ø—Ä–∏—à–µ–ª –≤ —ç—Ç–æ—Ç –º–∏—Ä:</h4>
        <p style={{ whiteSpace: "pre-wrap" }}>{birthChakra.birth}</p>
    </div>

    {/* –ë–ª–æ–∫ 2 - –°–µ–≥–æ–¥–Ω—è */}
    <div style={{
        backgroundColor: "white",
        padding: "15px",
        borderRadius: "8px",
        boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
        textAlign: "left"
    }}>
        <h4>üìÖ –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å –ø—Ä–æ —ç—Ç–æ:</h4>
        <p style={{ whiteSpace: "pre-wrap" }}>{birthChakra.today}</p>
    </div>

    {/* –ë–ª–æ–∫ 3 - –¢–≤–æ–π –ø—É—Ç—å —Å–µ–π—á–∞—Å */}
    <div style={{
        backgroundColor: "white",
        padding: "15px",
        borderRadius: "8px",
        boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
        marginBottom: "15px", // –î–æ–±–∞–≤–∏–ª –æ—Ç—Å—Ç—É–ø
        textAlign: "left"
    }}>
        <h4>üõ§Ô∏è –¢–≤–æ–π –ø—É—Ç—å —Å–µ–π—á–∞—Å:</h4>
        <p style={{ whiteSpace: "pre-wrap" }}>{birthChakra.currentPath}</p>
         {/* –ü–µ—Ä–µ–Ω–æ—Å –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä—å –±–ª–æ–∫–∞ */}
    {!showQuestions && !queryResult && (
        <button onClick={startQuestionnaire} 
            style={{ 
                marginTop: "15px", 
                padding: "10px 20px", 
                fontSize: "1em", 
                cursor: "pointer", 
                width: "100%", 
                backgroundColor: "#007bff", 
                color: "white", 
                border: "none", 
                borderRadius: "5px" 
            }}>
            –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        </button>
    )}
    </div>

</div>

            )}
        </div>

        {showQuestions && (
            <div style={{
                position: "fixed",
                top: "50%",
                left: "50%",
                transform: "translate(-50%, -50%)",
                backgroundColor: "white",
                padding: "20px",
                color: "black",
                borderRadius: "10px",
                boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.2)",
                zIndex: 1000,
                textAlign: "center"
            }}>
                {!questionConfirmed ? (
                    <>
                        <p>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.</p>
                        <p>–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–ª–∞–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–≤–æ–∏–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º..</p>
                        <button onClick={() => setQuestionConfirmed(true)} style={{ padding: "10px 20px", fontSize: "1em", cursor: "pointer" }}>–ì–æ—Ç–æ–≤–æ</button>
                    </>
                ) : currentQuestion !== null ? (
                    <>
                        <p>–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:</p>
                        <p>{QUESTIONS[currentQuestion]}</p>
                        <button onClick={() => handleAnswer(true)} style={{ margin: "10px", padding: "10px 20px", fontSize: "1em", cursor: "pointer" }}>–î–∞</button>
                        <button onClick={() => handleAnswer(false)} style={{ margin: "10px", padding: "10px 20px", fontSize: "1em", cursor: "pointer" }}>–ù–µ—Ç</button>
                    </>
                ) : !showAnalysis ? (
                    <>
                        <p>–í–∞—à –≤–æ–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω.</p>
                        <button onClick={handleGetAnswer} style={{ padding: "10px 20px", fontSize: "1em", cursor: "pointer" }}>–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
                    </>
                ) : queryResult ? (
                    <div style={{ textAlign: "left" }}>
                        –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.
                        <p>üìú <b>–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Å–∞–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫:</b> {queryResult.interpretation}</p>
                        <p>üîÑ <b>–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ:</b> {queryResult.growthVector}</p>
                        <p>üå± <b>–î–ª—è –≤–∞—Å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:</b> {queryResult.queryOrganicity.join(", ")}</p>
                        <button onClick={() => setShowQuestions(false)} style={{ padding: "10px 20px", fontSize: "1em", cursor: "pointer", marginTop: "10px" }}>–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                ) : null}
            </div>
        )}
    </div>
);

}

export default App;
