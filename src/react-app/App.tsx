import { useState } from "react";
import { getBirthChakra, analyzeQuery } from "../api/birthChakra";
import solarData from "../api/solar.json";
import lunarData from "../api/lunar.json";

function convertToJulianDate(dateString: string): string {
    const date = new Date(dateString);
    const start = new Date(date.getFullYear(), 0, 0);
    const diff = date.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    const dayOfYear = Math.floor(diff / oneDay);
    return `${date.getFullYear()}-${dayOfYear.toString().padStart(3, "0")}`;
}

function App() {
    const [birthDate, setBirthDate] = useState("");
    const [birthChakra, setBirthChakra] = useState<{
        birth: string;
        currentPath: string;
        today: string;
    } | null>(null);

    const [showQuestions, setShowQuestions] = useState(false);
    const [showEmotionDialog, setShowEmotionDialog] = useState(false);
    const [selectedEmotion, setSelectedEmotion] = useState<string | null>(null);
    const [emotionAnalysis, setEmotionAnalysis] = useState<string | null>(null);

    const handleCheckChakra = () => {
        const today = new Date().toISOString().split("T")[0];
        const formattedDate = convertToJulianDate(birthDate);

        const solarEntry = solarData.find(entry => entry.Date === formattedDate);
        const lunarEntry = lunarData.find(entry => entry.Date === formattedDate);

        if (!solarEntry || !lunarEntry) {
            setBirthChakra({ birth: "‚ùå –û—à–∏–±–∫–∞", currentPath: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö!", today: "" });
            return;
        }

        const sunDegree = solarEntry.Solar_Longitude;
        const moonDegree = lunarEntry.Lunar_Longitude;

        const result = getBirthChakra(birthDate, today, sunDegree, moonDegree);
        setBirthChakra(result.result);
    };

    const startEmotionDialog = () => {
        setShowEmotionDialog(true);
        setSelectedEmotion(null);
        setEmotionAnalysis(null);
    };

    const handleEmotionSelect = (emotion: string) => {
        setSelectedEmotion(emotion);
        setEmotionAnalysis(`üî• –î–µ–π—Å—Ç–≤–∏—è –∫–∞–∫ ${emotion}. üí° –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–∞–∫ ${emotion}.`);
    };

    return (
        <div style={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            minHeight: "100vh",
            width: "100vw",
            textAlign: "center",
            fontFamily: "inherit",
            color: "black",
            padding: "20px",
            boxSizing: "border-box",
            backgroundColor: "#ffffff",
            position: "relative"
        }}>
            {/** –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ **/}
            {(showQuestions || showEmotionDialog) && (
                <div style={{
                    position: "fixed",
                    top: 0,
                    left: 0,
                    width: "100vw",
                    height: "100vh",
                    backgroundColor: "rgba(0, 0, 0, 0.5)",
                    zIndex: 1000
                }} />
            )}

            <div style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                textAlign: "center",
                maxWidth: "700px",
                margin: "20px auto",
                padding: "20px",
                backgroundColor: "#f5f5f5",
                borderRadius: "10px",
                boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)"
            }}>
                <h1>–ß–∞–∫—Ä–æ—Å–∫–æ–ø</h1>
                <p>–ß–∞–∫—Ä–æ—Å–∫–æ–ø ‚Äî —ç—Ç–æ —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –¥–≤–∏–∂–µ—Ç—Å—è —Ç–≤–æ—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è –∏ –∫–∞–∫–∏–µ —Å–∏–ª—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</p>
                <input type="date" value={birthDate} onChange={(e) => setBirthDate(e.target.value)} />
                <button onClick={handleCheckChakra}>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</button>
            </div>

            {birthChakra && (
                <div style={{ maxWidth: "700px", width: "100%" }}>
                    <div style={{
                        backgroundColor: "#f5f5f5",
                        padding: "15px",
                        borderRadius: "10px",
                        boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                        marginBottom: "15px",
                        textAlign: "left"
                    }}>
                        <h4>üîÜ –° —á–µ–º —Ç—ã –ø—Ä–∏—à–µ–ª –≤ —ç—Ç–æ—Ç –º–∏—Ä:</h4>
                        <p>{birthChakra.birth}</p>
                    </div>

                    <div style={{
                        backgroundColor: "#f5f5f5",
                        padding: "15px",
                        borderRadius: "10px",
                        boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                        marginBottom: "15px",
                        textAlign: "left"
                    }}>
                        <h4>üìÖ –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å –ø—Ä–æ —ç—Ç–æ:</h4>
                        <p>{birthChakra.today}</p>
                        <button onClick={startEmotionDialog} style={{ marginTop: "10px" }}>–¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è</button>
                    </div>

                    <div style={{
                        backgroundColor: "#f5f5f5",
                        padding: "15px",
                        borderRadius: "10px",
                        boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                        textAlign: "left"
                    }}>
                        <h4>üõ§Ô∏è –¢–≤–æ–π –ø—É—Ç—å —Å–µ–π—á–∞—Å:</h4>
                        <p>{birthChakra.currentPath}</p>
                        <button onClick={() => setShowQuestions(true)} style={{ marginTop: "10px" }}>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</button>
                    </div>
                </div>
            )}

            {/** üîπ –î–∏–∞–ª–æ–≥ "–¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è" **/}
            {showEmotionDialog && (
                <div style={{
                    position: "fixed",
                    top: "50%",
                    left: "50%",
                    transform: "translate(-50%, -50%)",
                    backgroundColor: "white",
                    padding: "20px",
                    color: "black",
                    borderRadius: "10px",
                    boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.2)",
                    zIndex: 1001,
                    textAlign: "center"
                }}>
                    <p>–£—Ç–æ—á–Ω–∏, –∫–∞–∫ —Ç—ã –æ—â—É—â–∞–µ—à—å —Å–µ–±—è:</p>
                    <button onClick={() => handleEmotionSelect("—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ")}>–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ</button>
                    <button onClick={() => handleEmotionSelect("—Ä–∞–¥–æ—Å—Ç—å")}>–†–∞–¥–æ—Å—Ç—å</button>
                    <button onClick={() => handleEmotionSelect("–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ")}>–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ</button>
                    {selectedEmotion && <p>{emotionAnalysis}</p>}
                    <button onClick={() => setShowEmotionDialog(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            )}
        </div>
    );
}

export default App;
