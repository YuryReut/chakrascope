import { useState } from "react";
import { useEffect } from "react";
import {
  getBirthChakra,
  analyzeQuery,
  getPersonalChakraDay,
  getCurrentTithi,
  getChakraFromTithi
} from "../api/birthChakra";
import solarData from "../api/solar.json";
import lunarData from "../api/lunar.json";
import day_EQ7 from "../api/dayEQ7_data.json";

type ChakraName = '–ú—É–ª–∞–¥—Ö–∞—Ä–∞' | '–°–≤–∞–¥—Ö–∏—Å—Ç—Ö–∞–Ω–∞' | '–ú–∞–Ω–∏–ø—É—Ä–∞' | '–ê–Ω–∞—Ö–∞—Ç–∞' | '–í–∏—à—É–¥—Ö–∞' | '–ê–¥–∂–Ω–∞' | '–°–∞—Ö–∞—Å—Ä–∞—Ä–∞';

function convertToJulianDate(dateString: string): string {
    const date = new Date(dateString);
    const start = new Date(date.getFullYear(), 0, 0);
    const diff = date.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    const dayOfYear = Math.floor(diff / oneDay);
    return `${date.getFullYear()}-${dayOfYear.toString().padStart(3, "0")}`;
}

const QUESTIONS = [
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –∂–∏–∑–Ω–∏?",
    "–û–Ω –∫–∞—Å–∞–µ—Ç—Å—è –≤–∞—à–∏—Ö —ç–º–æ—Ü–∏–π –∏ –∂–µ–ª–∞–Ω–∏–π?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Å–∏–ª—É –≤–æ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π?",
    "–û–Ω —Å–≤—è–∑–∞–Ω —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ –∏ —Å–µ—Ä–¥–µ—á–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞?",
    "–û–Ω –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –≤–∏–¥–µ–Ω–∏–µ?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ?"
];

function App() {
  const [birthDate, setBirthDate] = useState("");
  const [birthChakra, setBirthChakra] = useState<{
    birth: {
        chakraNumber: number;
        chakraEmoji: string;
        chakraTitle: string;
        chakraName: string;
        inner: string;
        outer: string;
        relationship: string;
        link: string;
        lovelink: string;
        lunarDescription: string;
        lunarEmoji: string;
        lunarNumber: number;
        lunarTitle: string;
        lunarName: string;
    };
    currentPath: string;
    today: string;
    todayText: string;
} | null>(null);
    const [showQuestions, setShowQuestions] = useState(false);
    const [answers, setAnswers] = useState(Array(QUESTIONS.length).fill(null));
    const [currentQuestion, setCurrentQuestion] = useState<number | null>(0);
    const [queryResult, setQueryResult] = useState<null | {
        interpretation: string;
        growthVector: string;
        queryOrganicity: string[];
    }>(null);
    const [questionConfirmed, setQuestionConfirmed] = useState(false);
    const [showAnalysis, setShowAnalysis] = useState(false);
    // üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ —ç–º–æ—Ü–∏–∏ –¥–Ω—è 
const [showEmotionDialog, setShowEmotionDialog] = useState(false);
const [selectedEmotion, setSelectedEmotion] = useState<string | null>(null);
const [emotionAnalysis, setEmotionAnalysis] = useState<string | null>(null);
const [currentStep, setCurrentStep] = useState<'intro' | 'sun' | 'moon' | 'result'>('intro');
const [sunState, setSunState] = useState<'balance' | 'excess' | 'block' | null>(null);
const [moonState, setMoonState] = useState<'balance' | 'excess' | 'block' | null>(null);
const [chakraNameSun, setChakraNameSun] = useState<ChakraName | null>(null);
const [chakraNameMoon, setChakraNameMoon] = useState<ChakraName | null>(null);    
console.log(selectedEmotion, moonState); // –≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏

const [isEmotionStepCompleted, setIsEmotionStepCompleted] = useState(false);
const [showEmotionReminder, setShowEmotionReminder] = useState(false);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ ‚Äî –¥–æ–±–∞–≤–∏–º —á–µ—Ä–µ–∑ useEffect
useEffect(() => {
  const style = document.createElement('style');
  style.innerHTML = `
    input[type="date"] {
      background-color: #fff;
      color: #000;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
      font-size: 16px;
      width: 100%;
      box-sizing: border-box;
      appearance: none;
      -webkit-appearance: none;
    }

    button {
      background-color: #fff;
      color: #000;
      border: 2px solid #000;
      padding: 10px 20px;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    button:hover {
      background-color: #000;
      color: #fff;
    }
  `;
  document.head.appendChild(style);
  return () => {
    document.head.removeChild(style);
  };
}, []);

    
// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞–∫—Ä—ã
const handleStateSelect = (state: 'balance' | 'excess' | 'block') => {
    if (currentStep === 'sun') {
        setSunState(state);
        setCurrentStep('moon');
    } else if (currentStep === 'moon') {
        setMoonState(state);
        setCurrentStep('result');

        if (!chakraNameSun || !chakraNameMoon) {
            setEmotionAnalysis('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞–∫—Ä –¥–Ω—è.');
            return;
        }

        const chakraInfoSun = day_EQ7.chakras[chakraNameSun as ChakraName];
        const chakraInfoMoon = day_EQ7.chakras[chakraNameMoon as ChakraName];

        if (!chakraInfoSun || !chakraInfoMoon) {
            setEmotionAnalysis('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞–∫—Ä –¥–Ω—è.');
            return;
        }

        setEmotionAnalysis(
          `‚òÄÔ∏è –í –¥–µ–π—Å—Ç–≤–∏—è—Ö: ${chakraInfoSun.sun_recommendations[sunState!]}\n` +
          `üåô –í —ç–º–æ—Ü–∏—è—Ö: ${chakraInfoMoon.moon_recommendations[state]}`
        );

        // ‚úÖ –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è –ø—Ä–æ–π–¥–µ–Ω–æ
        setIsEmotionStepCompleted(true);
    }
};

const startEmotionDialog = () => {
    if (birthChakra?.today) {
        const chakrasToday = birthChakra.today.split(" –∏ ");
        if (chakrasToday.length === 2) {
            setChakraNameSun(chakrasToday[0].trim() as ChakraName);
            setChakraNameMoon(chakrasToday[1].trim() as ChakraName);
        }
    }

    setShowEmotionDialog(true);
    setSelectedEmotion(null);
    setEmotionAnalysis(null);
    setCurrentStep('intro');
    setSunState(null);
    setMoonState(null);
};



  const handleCheckChakra = () => {
    const today = new Date().toISOString().split("T")[0];
    const formattedDate = convertToJulianDate(birthDate);

    const solarEntry = solarData.find(entry => entry.Date === formattedDate);
    const lunarEntry = lunarData.find(entry => entry.Date === formattedDate);

    if (!solarEntry || !lunarEntry) {
        setBirthChakra({ 
              birth: {
                chakraNumber: 0,
                chakraEmoji: "‚ùå",
                chakraTitle: "–û—à–∏–±–∫–∞",
                chakraName: "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                inner: "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã",
                outer: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞",
                relationship: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                link: "#",
                lovelink: "#",
                lunarDescription: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                lunarEmoji: "‚ùå",
                lunarNumber: 0,
                lunarTitle: "–û—à–∏–±–∫–∞",
                lunarName: "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
              }, 
              currentPath: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö!", 
              today: "",
              todayText: ""
            });
        return;
    }

    const sunDegree = solarEntry.Solar_Longitude;
    const moonDegree = lunarEntry.Lunar_Longitude;

    const result = getBirthChakra(birthDate, today, sunDegree, moonDegree);
    setBirthChakra(result.result);

    // üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —á–∞–∫—Ä –ø–æ —Å–æ–ª–Ω—Ü—É –∏ –ª—É–Ω–µ
    const chakraNameMap = {
        1: "–ú—É–ª–∞–¥—Ö–∞—Ä–∞",
        2: "–°–≤–∞–¥—Ö–∏—Å—Ç—Ö–∞–Ω–∞",
        3: "–ú–∞–Ω–∏–ø—É—Ä–∞",
        4: "–ê–Ω–∞—Ö–∞—Ç–∞",
        5: "–í–∏—à—É–¥—Ö–∞",
        6: "–ê–¥–∂–Ω–∞",
        7: "–°–∞—Ö–∞—Å—Ä–∞—Ä–∞"
    };

    const chakraNumberSun = getPersonalChakraDay(birthDate, today, moonDegree);
    const chakraNumberMoon = getChakraFromTithi(getCurrentTithi(moonDegree));

    setChakraNameSun(chakraNameMap[chakraNumberSun as keyof typeof chakraNameMap] as ChakraName);
    setChakraNameMoon(chakraNameMap[chakraNumberMoon as keyof typeof chakraNameMap] as ChakraName);
};


    const startQuestionnaire = () => {
        setShowQuestions(true);
        setQuestionConfirmed(false);
        setCurrentQuestion(0);
        setAnswers(Array(QUESTIONS.length).fill(null));
        setShowAnalysis(false);
        setQueryResult(null);
    };

    const handleAnswer = (answer: boolean) => {
        if (currentQuestion !== null) {
            const newAnswers = [...answers];
            newAnswers[currentQuestion] = answer;
            setAnswers(newAnswers);

            if (currentQuestion < QUESTIONS.length - 1) {
                setCurrentQuestion(currentQuestion + 1);
            } else {
                setCurrentQuestion(null);
            }
        }
    };

    const handleGetAnswer = () => {
        const analysis = analyzeQuery(answers);
        setQueryResult(analysis);
        setShowAnalysis(true);
    };

    return (
        <div style={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            minHeight: "100vh",
            width: "100vw",
            textAlign: "center",
            fontFamily: "inherit",
            color: "black",
            padding: "20px",
            boxSizing: "border-box",
            backgroundColor: "#ffffff"
        }}>
            <div style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                textAlign: "center",
                maxWidth: "700px",
                margin: "20px auto",
                padding: "20px",
                backgroundColor: "#f5f5f5",
                borderRadius: "10px",
                boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)"
            }}>
                <h1>–ß–∞–∫—Ä–æ—Å–∫–æ–ø</h1>
                <p>–ß–∞–∫—Ä–æ—Å–∫–æ–ø ‚Äî —ç—Ç–æ —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –¥–≤–∏–∂–µ—Ç—Å—è —Ç–≤–æ—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è –∏ –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</p>
                <input type="date" value={birthDate} onChange={(e) => setBirthDate(e.target.value)} /> <button onClick={handleCheckChakra}>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</button>

            {birthChakra && (
                <div>
                    {/* –ë–ª–æ–∫ 1 - –° —á–µ–º —Ç—ã –ø—Ä–∏—à–µ–ª –≤ –º–∏—Ä */}
                    <div style={{
                            backgroundColor: "#ffffff",
                            padding: "15px",
                            borderRadius: "8px",
                            boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                            marginBottom: "15px",
                            textAlign: "left"
                        }}>
                        <h4>üîÜ –° —á–µ–º —Ç—ã –ø—Ä–∏—à–µ–ª –≤ —ç—Ç–æ—Ç –º–∏—Ä:</h4>
                        <p>
                          üîÜ –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞–∫—Ä–∞ ‚Äî {birthChakra.birth.chakraEmoji} {birthChakra.birth.chakraNumber}-–π —á–∞–∫—Ä—ã {birthChakra.birth.chakraTitle} ({birthChakra.birth.chakraName}) ‚Üí <a 
                              href={birthChakra.birth.link} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              style={{ color: "inherit", textDecoration: "none" }}
                            >
                              –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </a>
                            <br />
                          üåÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ—â—É—â–µ–Ω–∏–µ: {birthChakra.birth.inner}<br />
                          üåç –ö–∞–∫ —ç—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∂–∏–∑–Ω–∏: {birthChakra.birth.outer}<br />
                          ‚ù§Ô∏è –í –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö: {birthChakra.birth.relationship} ‚Üí <a 
                              href={birthChakra.birth.lovelink} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              style={{ color: "inherit", textDecoration: "none" }}
                            >
                              –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </a>
                          <br /><br />
                          üåô –¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º–∏—Ä–∞ ‚Äî {birthChakra.birth.lunarDescription} –∏–∑ {birthChakra.birth.lunarEmoji} {birthChakra.birth.lunarNumber}-–π –ß–∞–∫—Ä—ã {birthChakra.birth.lunarTitle} ({birthChakra.birth.lunarName}).
                        </p>
                    </div>
                    {/* –ë–ª–æ–∫ 2 - –°–µ–≥–æ–¥–Ω—è */}
                    <div style={{
                            backgroundColor: "#ffffff",
                            padding: "15px",
                            borderRadius: "8px",
                            boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                            marginBottom: "15px",
                            textAlign: "left"
                        }}>
                        <h4>üìÖ –°–µ–≥–æ–¥–Ω—è:</h4>
                        <p>{birthChakra.todayText}</p>
                        <button onClick={startEmotionDialog}>–¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è</button>
                    </div>

                    {/* –ë–ª–æ–∫ 3 - –¢–≤–æ–π –ø—É—Ç—å —Å–µ–π—á–∞—Å */}
                    <div style={{
                            backgroundColor: "#ffffff",
                            padding: "15px",
                            borderRadius: "8px",
                            boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                            marginBottom: "15px",
                            textAlign: "left"
                        }}>
                        <h4>üõ§Ô∏è –¢–≤–æ–π –ø—É—Ç—å:</h4>
                        <p>{birthChakra.currentPath}</p>
                        <button
                          onClick={() => {
                            if (isEmotionStepCompleted) {
                              startQuestionnaire();
                            } else {
                              setShowEmotionReminder(true);
                            }
                          }}
                          style={{
                            opacity: isEmotionStepCompleted ? 1 : 0.5,
                            pointerEvents: 'auto',
                            cursor: 'pointer',
                            marginTop: "10px"
                          }}
                        >
                          –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
                        </button>
                    </div>
                <p>
              2025 ¬© Non Profit R&D by Yury Reut{' '}
              <a
                href="https://www.instagram.com/nowyoucanseelove/"
                target="_blank"
                rel="noopener noreferrer"
                style={{ color: 'inherit', textDecoration: 'none' }}
              >
                Now you can see love
              </a>
            </p>
                </div>
            )}
            </div>   
{showEmotionReminder && (
  <div style={{
    position: "fixed",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    backgroundColor: "#fff",
    color: "#000",
    padding: "20px",
    borderRadius: "10px",
    boxShadow: "0px 4px 12px rgba(0, 0, 0, 0.2)",
    zIndex: 1000,
    textAlign: "center",
    maxWidth: "90%",
    width: "400px"
  }}>
    <p style={{ marginBottom: "15px" }}>
      üîÅ –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è.
    </p>
    <button
      onClick={() => {
        setShowEmotionReminder(false);
        startEmotionDialog();
      }}
      style={{
        padding: "8px 16px",
        backgroundColor: "#000",
        color: "#fff",
        border: "none",
        borderRadius: "6px",
        cursor: "pointer"
      }}
    >
      –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–Ω—è
    </button>
  </div>
)}
{/* üîπ –î–∏–∞–ª–æ–≥ "–¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è" */}
{showEmotionDialog && birthChakra && (
  <div style={{
    position: "fixed",
    top: 0,
    left: 0,
    width: "100vw",
    height: "100vh",
    backgroundColor: "rgba(0,0,0,0.5)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 999
  }}>
    <div style={{
      backgroundColor: "#ffffff",
      padding: "20px",
      borderRadius: "10px",
      maxWidth: "90%",
      width: "500px",
      textAlign: "center",
      boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)",
      color: "#000"
    }}>

      {/* –≠—Ç–∞–ø 0 ‚Äî –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç */}
      {currentStep === 'intro' && (
        <>
          <p style={{ marginBottom: "20px", whiteSpace: "pre-line" }}>
            –¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å—Ç—ã–º —Ç–æ–ª—å–∫–æ –≤ –º–µ–¥–∏—Ç–∞—Ü–∏–∏.
            –¢—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞—Ñ—Ñ–µ–∫—Ç–∞.
            –°–æ–ª–Ω—Ü–µ –∏ –õ—É–Ω–∞ –∑–∞–¥–∞—é—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Ç–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Ç–æ–≥–æ,
            —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–∫—Ä—É–≥, –∏ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Å–≤–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            –∏ –º–∏—Ä –≤–æ–∫—Ä—É–≥ —á–µ—Ä–µ–∑ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã.

            –£—Ç–æ—á–Ω–∏ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é ‚Äî
            –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –º–∏—Ä—É –∏ –∫ —Å–≤–æ–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è.
          </p>
          <button onClick={() => setCurrentStep('sun')}>
            –£—Ç–æ—á–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          </button>
        </>
      )}

      {/* –≠—Ç–∞–ø 1 ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –°–æ–ª–Ω—Ü—É */}
      {currentStep === 'sun' && chakraNameSun && day_EQ7.chakras[chakraNameSun] && (
        <>
          <p>–ß—Ç–æ –±–æ–ª—å—à–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ <b>–¥–µ–π—Å—Ç–≤–∏—è</b> —Å–µ–≥–æ–¥–Ω—è?</p>
          <button onClick={() => handleStateSelect("balance")}>üôÇ {day_EQ7.chakras[chakraNameSun].states.balance}</button>
          <button onClick={() => handleStateSelect("excess")}>üòµ {day_EQ7.chakras[chakraNameSun].states.excess}</button>
          <button onClick={() => handleStateSelect("block")}>üò∂ {day_EQ7.chakras[chakraNameSun].states.block}</button>
        </>
      )}

      {/* –≠—Ç–∞–ø 2 ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –õ—É–Ω–µ */}
      {currentStep === 'moon' && chakraNameMoon && day_EQ7.chakras[chakraNameMoon] && (
        <>
          <p>–ß—Ç–æ –ª—É—á—à–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ <b>—ç–º–æ—Ü–∏–∏</b> —Å–µ–≥–æ–¥–Ω—è?</p>
          <button onClick={() => handleStateSelect("balance")}>üôÇ {day_EQ7.chakras[chakraNameMoon].states.balance}</button>
          <button onClick={() => handleStateSelect("excess")}>üòµ {day_EQ7.chakras[chakraNameMoon].states.excess}</button>
          <button onClick={() => handleStateSelect("block")}>üò∂ {day_EQ7.chakras[chakraNameMoon].states.block}</button>
        </>
      )}

      {/* –≠—Ç–∞–ø 3 ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
      {currentStep === 'result' && emotionAnalysis && (
        <>
          <p><b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b></p>
          <p style={{ whiteSpace: 'pre-line' }}>{emotionAnalysis}</p>
          <button onClick={() => setShowEmotionDialog(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
        </>
      )}

      {/* –û—à–∏–±–∫–∞ ‚Äî –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç */}
      {(!chakraNameSun || !chakraNameMoon || !day_EQ7.chakras[chakraNameSun] || !day_EQ7.chakras[chakraNameMoon]) && (
        <>
          <p>‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —á–∞–∫—Ä–∞—Ö –¥–Ω—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
          <button onClick={() => setShowEmotionDialog(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
        </>
      )}
    </div>
  </div>
)}
{/* üîπ –î–∏–∞–ª–æ–≥ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" */}
            {showQuestions && (
                <div style={{
                    position: "fixed",
                    top: "0",
                    left: "0",
                    width: "100vw",
                    height: "100vh",
                    backgroundColor: "rgba(0, 0, 0, 0.5)",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center"
                }}>
                    <div style={{
                        backgroundColor: "white",
                        padding: "20px",
                        borderRadius: "10px",
                        textAlign: "center"
                    }}>
                    {!questionConfirmed ? (
                        <>
                            <p>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.</p>
                            <button onClick={() => setQuestionConfirmed(true)}>–ì–æ—Ç–æ–≤–æ</button>
                        </>
                    ) : currentQuestion !== null ? (
                        <>
                            <p>{QUESTIONS[currentQuestion]}</p>
                            <button onClick={() => handleAnswer(true)}>–î–∞</button>
                            <button onClick={() => handleAnswer(false)}>–ù–µ—Ç</button>
                        </>
                    ) : !showAnalysis ? (
                        <>
                            <p>–í–∞—à –≤–æ–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω.</p>
                            <button onClick={handleGetAnswer}>–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
                        </>
                    ) : queryResult ? (
                        <div>
                            <p>üìú <b>–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Å–∞–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫:</b> {queryResult.interpretation}</p>
                            <p>üîÑ <b>–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ:</b> {queryResult.growthVector}</p>
                            <p>üå± <b>–î–ª—è –≤–∞—Å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:</b> {queryResult.queryOrganicity.join(", ")}</p>
                            <button onClick={() => setShowQuestions(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
                        </div>
                    ) : null}
                </div>
              </div>
            )}
        </div>
    );
}

export default App;
