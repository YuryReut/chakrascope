import { useState } from "react";
import {
  getBirthChakra,
  analyzeQuery,
  getPersonalChakraDay,
  getCurrentTithi,
  getChakraFromTithi
} from "../api/birthChakra";
import solarData from "../api/solar.json";
import lunarData from "../api/lunar.json";
import day_EQ7 from "../api/dayEQ7_data.json";

type ChakraName = '–ú—É–ª–∞–¥—Ö–∞—Ä–∞' | '–°–≤–∞–¥—Ö–∏—Å—Ç—Ö–∞–Ω–∞' | '–ú–∞–Ω–∏–ø—É—Ä–∞' | '–ê–Ω–∞—Ö–∞—Ç–∞' | '–í–∏—à—É–¥—Ö–∞' | '–ê–¥–∂–Ω–∞' | '–°–∞—Ö–∞—Å—Ä–∞—Ä–∞';

function convertToJulianDate(dateString: string): string {
    const date = new Date(dateString);
    const start = new Date(date.getFullYear(), 0, 0);
    const diff = date.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    const dayOfYear = Math.floor(diff / oneDay);
    return `${date.getFullYear()}-${dayOfYear.toString().padStart(3, "0")}`;
}

const QUESTIONS = [
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –∂–∏–∑–Ω–∏?",
    "–û–Ω –∫–∞—Å–∞–µ—Ç—Å—è –≤–∞—à–∏—Ö —ç–º–æ—Ü–∏–π –∏ –∂–µ–ª–∞–Ω–∏–π?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Å–∏–ª—É –≤–æ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π?",
    "–û–Ω —Å–≤—è–∑–∞–Ω —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ –∏ —Å–µ—Ä–¥–µ—á–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞?",
    "–û–Ω –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –≤–∏–¥–µ–Ω–∏–µ?",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ?"
];

function App() {
  const [birthDate, setBirthDate] = useState("2000-12-31");
  const [birthChakra, setBirthChakra] = useState<{
    birth: {
        chakraNumber: number;
        chakraEmoji: string;
        chakraTitle: string;
        chakraName: string;
        inner: string;
        outer: string;
        relationship: string;
        link: string;
        lovelink: string;
        lunarDescription: string;
        lunarEmoji: string;
        lunarNumber: number;
        lunarTitle: string;
        lunarName: string;
    };
    currentPath: string;
    today: string;
    todayText: string;
} | null>(null);
    const [showQuestions, setShowQuestions] = useState(false);
    const [questionStep, setQuestionStep] = useState<'intro' | 'select' | 'result'>('intro');
    const [showBirthDetails, setShowBirthDetails] = useState(false);
    const [answers, setAnswers] = useState(Array(QUESTIONS.length).fill(null));
    const [currentQuestion, setCurrentQuestion] = useState<number | null>(0);
    const [queryResult, setQueryResult] = useState<null | {
        interpretation: string;
        growthVector: string;
        queryOrganicity: string[];
        todayPerception: string;
    }>(null);
    const [questionConfirmed, setQuestionConfirmed] = useState(false);
    const [showAnalysis, setShowAnalysis] = useState(false);
    // üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ —ç–º–æ—Ü–∏–∏ –¥–Ω—è 
const [showEmotionDialog, setShowEmotionDialog] = useState(false);
const [emotionAnalysis, setEmotionAnalysis] = useState<string | null>(null);
const [currentStep, setCurrentStep] = useState<'intro' | 'sun' | 'moon' | 'result'>('intro');
const [sunState, setSunState] = useState<'balance' | 'excess' | 'block' | null>(null);
const [chakraNameSun, setChakraNameSun] = useState<ChakraName | null>(null);
const [chakraNameMoon, setChakraNameMoon] = useState<ChakraName | null>(null);    
const [moonState, setMoonState] = useState<'balance' | 'excess' | 'block' | null>(null);
void moonState;
// üîπ –ö–∞–∫ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å –≤–æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø–æ —á–∞–∫—Ä–µ –¥–Ω—è


const [isEmotionStepCompleted, setIsEmotionStepCompleted] = useState(false);
const [showEmotionReminder, setShowEmotionReminder] = useState(false);    
void queryResult;
void questionConfirmed;
void showAnalysis;
  
// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞–∫—Ä—ã
const handleStateSelect = (state: 'balance' | 'excess' | 'block') => {
    if (currentStep === 'sun') {
        setSunState(state);
        setCurrentStep('moon');
    } else if (currentStep === 'moon') {
        setMoonState(state);
        setCurrentStep('result');

        if (!chakraNameSun || !chakraNameMoon) {
            setEmotionAnalysis('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞–∫—Ä –¥–Ω—è.');
            return;
        }

        const chakraInfoSun = day_EQ7.chakras[chakraNameSun as ChakraName];
        const chakraInfoMoon = day_EQ7.chakras[chakraNameMoon as ChakraName];

        if (!chakraInfoSun || !chakraInfoMoon) {
            setEmotionAnalysis('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞–∫—Ä –¥–Ω—è.');
            return;
        }

        setEmotionAnalysis(
          `‚òÄÔ∏è –í –¥–µ–π—Å—Ç–≤–∏—è—Ö: ${chakraInfoSun.sun_recommendations[sunState!]}\n` +
          `üåô –í —ç–º–æ—Ü–∏—è—Ö: ${chakraInfoMoon.moon_recommendations[state]}`
        );

        // ‚úÖ –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è –ø—Ä–æ–π–¥–µ–Ω–æ
        setIsEmotionStepCompleted(true);
    }
};

const startEmotionDialog = () => {
    if (birthChakra?.today) {
        const chakrasToday = birthChakra.today.split(" –∏ ");
        if (chakrasToday.length === 2) {
            setChakraNameSun(chakrasToday[0].trim() as ChakraName);
            setChakraNameMoon(chakrasToday[1].trim() as ChakraName);
        }
    }

    setShowEmotionDialog(true);
    setEmotionAnalysis(null);
    setCurrentStep('intro');
    setSunState(null);
};

  const handleCheckChakra = () => {
    const today = new Date().toISOString().split("T")[0];
    const formattedDate = convertToJulianDate(birthDate);

    const solarEntry = solarData.find(entry => entry.Date === formattedDate);
    const lunarEntry = lunarData.find(entry => entry.Date === formattedDate);

    if (!solarEntry || !lunarEntry) {
        setBirthChakra({ 
              birth: {
                chakraNumber: 0,
                chakraEmoji: "‚ùå",
                chakraTitle: "–û—à–∏–±–∫–∞",
                chakraName: "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                inner: "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã",
                outer: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞",
                relationship: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                link: "#",
                lovelink: "#",
                lunarDescription: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                lunarEmoji: "‚ùå",
                lunarNumber: 0,
                lunarTitle: "–û—à–∏–±–∫–∞",
                lunarName: "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
              }, 
              currentPath: "–î–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö!", 
              today: "",
              todayText: ""
            });
        return;
    }

    const sunDegree = solarEntry.Solar_Longitude;
    const moonDegree = lunarEntry.Lunar_Longitude;

    const result = getBirthChakra(birthDate, today, sunDegree, moonDegree);
    setBirthChakra(result.result);

    // üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —á–∞–∫—Ä –ø–æ —Å–æ–ª–Ω—Ü—É –∏ –ª—É–Ω–µ
    const chakraNameMap = {
        1: "–ú—É–ª–∞–¥—Ö–∞—Ä–∞",
        2: "–°–≤–∞–¥—Ö–∏—Å—Ç—Ö–∞–Ω–∞",
        3: "–ú–∞–Ω–∏–ø—É—Ä–∞",
        4: "–ê–Ω–∞—Ö–∞—Ç–∞",
        5: "–í–∏—à—É–¥—Ö–∞",
        6: "–ê–¥–∂–Ω–∞",
        7: "–°–∞—Ö–∞—Å—Ä–∞—Ä–∞"
    };

    const chakraNumberSun = getPersonalChakraDay(birthDate, today, moonDegree);
    const chakraNumberMoon = getChakraFromTithi(getCurrentTithi(moonDegree));

    setChakraNameSun(chakraNameMap[chakraNumberSun as keyof typeof chakraNameMap] as ChakraName);
    setChakraNameMoon(chakraNameMap[chakraNumberMoon as keyof typeof chakraNameMap] as ChakraName);
};

    const startQuestionnaire = () => {
        setShowQuestions(true);
        setQuestionConfirmed(false);
        setCurrentQuestion(0);
        setAnswers(Array(QUESTIONS.length).fill(null));
        setShowAnalysis(false);
        setQueryResult(null);
    };

  setQueryResult({
    interpretation,
    todayPerception,
    queryOrganicity: [organicityText],
    growthVector: vectorText
  });
  setShowQuestions(false);
};


    return (
        <div style={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            minHeight: "100vh",
            width: "100vw",
            textAlign: "center",
            fontFamily: "inherit",
            color: "black",
            padding: "20px",
            boxSizing: "border-box",
            backgroundColor: "#ffffff"
        }}>
          <style>
  {`
    button {
      background-color: #fff;
      color: #000;
      border: 1px solid #000;
      border-radius: 6px;
      padding: 8px 16px;
      font-size: 16px;
      cursor: pointer;
      margin: 6px;
      transition: background-color 0.2s ease;
    }

    button:hover {
      background-color: #f0f0f0;
    }

    button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .button-row {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      justify-content: center;
      margin-top: 10px;
    }

    .button-column {
      display: flex;
      flex-direction: column;
      gap: 10px;
      align-items: stretch;
      margin-top: 10px;
    }
  `}
</style>

            <div style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                textAlign: "center",
                maxWidth: "700px",
                margin: "20px auto",
                padding: "20px",
                backgroundColor: "#f5f5f5",
                borderRadius: "10px",
                boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)"
            }}>
              <h1 style={{ fontWeight: 200, fontSize: "32px", marginBottom: "10px" }}>–ß–∞–∫—Ä–æ—Å–∫–æ–ø</h1>
             <div style={{ display: "flex", alignItems: "center", gap: "10px", margin: "20px 0" }}>
              <label style={{ marginRight: "10px" }}>
                –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:
                <input 
                  type="date" 
                  value={birthDate} 
                  onChange={(e) => setBirthDate(e.target.value)} 
                  style={{ 
                    marginLeft: "10px",
                    padding: "8px",
                    fontSize: "16px",
                    border: "1px solid #ccc",
                    borderRadius: "6px",
                    backgroundColor: "#fff",
                    color: "#000",
                    minWidth: "180px"
                  }} 
                />
              </label>
              <button
                onClick={handleCheckChakra}
                style={{
                  padding: "8px 16px",
                  fontSize: "18px",
                  border: "1px solid #000",
                  backgroundColor: "transparent",
                  color: "#000",
                  borderRadius: "6px",
                  cursor: "pointer"
                }}
              >
                ‚Üí
              </button>
            </div>
            {birthChakra && (
                <div>
                   {/* –ë–ª–æ–∫ 1 - –° —á–µ–º —Ç—ã –ø—Ä–∏—à–µ–ª –≤ –º–∏—Ä */} 
                  <div style={{ 
                    backgroundColor: "#ffffff",
                    padding: "15px",
                    borderRadius: "8px",
                    boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                    marginBottom: "15px",
                    textAlign: "left"
                  }}>
                    <h4>–ë–∞–∑–∞</h4>
                    <p>
                      üîÜ | {birthChakra.birth.chakraEmoji} : –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞–∫—Ä–∞ ‚Äî {birthChakra.birth.chakraNumber}-—è —á–∞–∫—Ä–∞ {birthChakra.birth.chakraTitle} ({birthChakra.birth.chakraName}) ‚Üí{' '}
                      <a href={birthChakra.birth.link} target="_blank" rel="noopener noreferrer" style={{ color: "inherit", textDecoration: "none" }}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                    </p>
                    <p>
                      ‚ù§Ô∏è : {birthChakra.birth.relationship} ‚Üí{' '}
                      <a href={birthChakra.birth.lovelink} target="_blank" rel="noopener noreferrer" style={{ color: "inherit", textDecoration: "none" }}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                    </p>
                  
                    <a
                      href="#"
                      onClick={(e) => {
                        e.preventDefault();
                        setShowBirthDetails(!showBirthDetails);
                      }}
                      style={{
                        display: "inline-block",
                        marginTop: "10px",
                        fontSize: "14px",
                        color: "#0077cc",
                        textDecoration: "underline",
                        cursor: "pointer"
                      }}
                    >
                      {showBirthDetails ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"}
                    </a>

                    {showBirthDetails && (
                      <div style={{ marginTop: "10px" }}>
                      <p>–î–ª—è —Ç–µ–±—è –≤–Ω—É—Ç—Ä–∏ ‚Äî {birthChakra.birth.inner}.</p>
                      <p>–°–Ω–∞—Ä—É–∂–∏, –≤ —Ç–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö ‚Äî {birthChakra.birth.outer}.</p>
                      <p>üåô | {birthChakra.birth.lunarEmoji} : {birthChakra.birth.lunarDescription}</p>
                    </div>
                    )}
                  </div>
                   {/* –ë–ª–æ–∫ 2 - –°–µ–≥–æ–¥–Ω—è */}
                  <div style={{
                    backgroundColor: "#ffffff",
                    padding: "15px",
                    borderRadius: "8px",
                    boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                    marginBottom: "15px",
                    textAlign: "left"
                  }}>
                    <h4>–°–µ–≥–æ–¥–Ω—è</h4>
                    <p>{birthChakra.todayText}</p>
                    <button onClick={startEmotionDialog}>–¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è</button>
                  </div>
                    {/* –ë–ª–æ–∫ 3 - –¢–≤–æ–π –ø—É—Ç—å —Å–µ–π—á–∞—Å */}
                    <div style={{
                            backgroundColor: "#ffffff",
                            padding: "15px",
                            borderRadius: "8px",
                            boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                            marginBottom: "15px",
                            textAlign: "left"
                        }}>
                        <h4>–¢–≤–æ–π 2025-–π</h4>
                        <p>{birthChakra.currentPath}</p>
                        <button
                          onClick={() => {
                            if (isEmotionStepCompleted) {
                              startQuestionnaire();
                            } else {
                              setShowEmotionReminder(true);
                            }
                          }}
                          style={{
                            opacity: isEmotionStepCompleted ? 1 : 0.5,
                            pointerEvents: 'auto',
                            cursor: 'pointer',
                            marginTop: "10px"
                          }}
                        >
                          –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
                        </button>
                    </div>
                </div>
            )}
            </div>
  <div style={{
    marginTop: "20px",
    maxWidth: "700px",
    width: "100%",
    textAlign: "center",
    fontSize: "11px",
    lineHeight: "1.5",
    color: "#000"
}}>
  <p>
    –ß–∞–∫—Ä–æ—Å–∫–æ–ø ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–µ–¥–∏–Ω—è–µ—Ç –¥—Ä–µ–≤–Ω–µ–µ –∑–Ω–∞–Ω–∏–µ –æ —á–∞–∫—Ä–∞—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –°–æ–ª–Ω—Ü–µ –∏ –õ—É–Ω–µ.
    –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã –≤ —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è, –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç —Ç–≤–æ–π –≥–æ–¥ –∏ –∫–∞–∫–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç–º—ã –≤–µ–¥—É—Ç —Ç–µ–±—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.
    –≠—Ç–æ —Å–ø–æ—Å–æ–± –º—è–≥–∫–æ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É–ª–æ–≤–∏—Ç—å —Ä–∏—Ç–º—ã –∂–∏–∑–Ω–∏ –∏ –Ω–∞—á–∞—Ç—å –ª—É—á—à–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è ‚Äî –±–µ–∑ –º–∏—Å—Ç–∏–∫–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–ª—é–¥–∞—è.
  </p>
  <p style={{ marginTop: "10px" }}>
    2025 ¬© Non Profit R&D by Yury Reut{' '}
    <a
      href="https://www.instagram.com/nowyoucanseelove/"
      target="_blank"
      rel="noopener noreferrer"
      style={{ color: 'inherit', textDecoration: 'none' }}
    >
      Now You Can See Love
    </a>
  </p>
</div>

{showEmotionReminder && (
  <div style={{
    position: "fixed",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    backgroundColor: "#fff",
    color: "#000",
    padding: "20px",
    borderRadius: "10px",
    boxSizing: "border-box",
    boxShadow: "0px 4px 12px rgba(0, 0, 0, 0.2)",
    zIndex: 1000,
    textAlign: "center",
    width: "100%",
    maxWidth: "90vw"
  }}>
    <p style={{ marginBottom: "15px" }}>
      üîÅ –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è.
    </p>
    <button
      onClick={() => {
        setShowEmotionReminder(false);
        startEmotionDialog();
      }}
     >
      –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–Ω—è
    </button>
  </div>
)}
{/* üîπ –î–∏–∞–ª–æ–≥ "–¢–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è" */}
{showEmotionDialog && birthChakra && (
  <div style={{
    position: "fixed",
    top: 0,
    left: 0,
    width: "100vw",
    height: "100vh",
    backgroundColor: "rgba(0,0,0,0.5)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 999
  }}>
    <div style={{
      backgroundColor: "#ffffff",
      padding: "20px",
      borderRadius: "10px",
      width: "100%",
      maxWidth: "90vw",
      boxSizing: "border-box",
      textAlign: "center",
      boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)",
      color: "#000"
    }}>

      {/* –≠—Ç–∞–ø 0 ‚Äî –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç */}
      {currentStep === 'intro' && (
        <>
          <p>üôè</p>
          <p style={{ marginBottom: "20px", whiteSpace: "pre-line" }}>
            –ù–∞—à–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–∫–∞–∂–µ–Ω–æ ‚Äî –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º –≥–æ—Ä–º–æ–Ω–æ–≤, —ç–º–æ—Ü–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏–π.
–¢–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–ª—É–±–æ–∫–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –æ–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —è—Å–Ω—ã–º.
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–µ—Ä–≤–Ω–æ–π –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫ –º—ã –¥–µ–π—Å—Ç–≤—É–µ–º –∏ —á—É–≤—Å—Ç–≤—É–µ–º.
–û—Å–æ–∑–Ω–∞–≤–∞—è, —á–µ—Ä–µ–∑ –∫–∞–∫–æ–π —Ü–µ–Ω—Ç—Ä —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ —Å–µ–≥–æ–¥–Ω—è, —Ç—ã –º–æ–∂–µ—à—å —Ç–æ—á–Ω–µ–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è.
            </p>
          <button onClick={() => setCurrentStep('sun')}>
            –£—Ç–æ—á–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          </button>
        </>
      )}

      {/* –≠—Ç–∞–ø 1 ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –°–æ–ª–Ω—Ü—É */}
      {currentStep === 'sun' && chakraNameSun && day_EQ7.chakras[chakraNameSun] && (
        <>
          <p>–ß—Ç–æ –±–æ–ª—å—à–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ <b>–¥–µ–π—Å—Ç–≤–∏—è</b> —Å–µ–≥–æ–¥–Ω—è?</p>
          <div className="button-column">
          <button onClick={() => handleStateSelect("balance")}>üôÇ {day_EQ7.chakras[chakraNameSun].states.balance}</button>
          <button onClick={() => handleStateSelect("excess")}>üòµ {day_EQ7.chakras[chakraNameSun].states.excess}</button>
          <button onClick={() => handleStateSelect("block")}>üò∂ {day_EQ7.chakras[chakraNameSun].states.block}</button>
        </div>
       </>
      )}

      {/* –≠—Ç–∞–ø 2 ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –õ—É–Ω–µ */}
      {currentStep === 'moon' && chakraNameMoon && day_EQ7.chakras[chakraNameMoon] && (
        <>
          <p>–ß—Ç–æ –ª—É—á—à–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ <b>—ç–º–æ—Ü–∏–∏</b> —Å–µ–≥–æ–¥–Ω—è?</p>
          <div className="button-column">
          <button onClick={() => handleStateSelect("balance")}>üôÇ {day_EQ7.chakras[chakraNameMoon].states.balance}</button>
          <button onClick={() => handleStateSelect("excess")}>üòµ {day_EQ7.chakras[chakraNameMoon].states.excess}</button>
          <button onClick={() => handleStateSelect("block")}>üò∂ {day_EQ7.chakras[chakraNameMoon].states.block}</button>
          </div>
        </>
      )}

      {/* –≠—Ç–∞–ø 3 ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
      {currentStep === 'result' && emotionAnalysis && (
        <>
          <p><b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b></p>
          <p style={{ whiteSpace: 'pre-line' }}>{emotionAnalysis}</p>
          <div className="button-row">
            <button onClick={() => setShowEmotionDialog(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        </>
      )}

      {/* –û—à–∏–±–∫–∞ ‚Äî –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç */}
      {(!chakraNameSun || !chakraNameMoon || !day_EQ7.chakras[chakraNameSun] || !day_EQ7.chakras[chakraNameMoon]) && (
        <>
          <p>‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —á–∞–∫—Ä–∞—Ö –¥–Ω—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
          <div className="button-row">
            <button onClick={() => setShowEmotionDialog(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        </>
      )}
    </div>
  </div>
)}
{/* üîπ –î–∏–∞–ª–æ–≥ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" */}
{showQuestions && (
  <div style={{
    position: "fixed",
    top: "0",
    left: "0",
    width: "100vw",
    height: "100vh",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 1000
  }}>
    <div style={{
      backgroundColor: "white",
      padding: "20px",
      width: "100%",
      maxWidth: "90vw",
      borderRadius: "10px",
      boxSizing: "border-box",
      textAlign: "center",
      color: "#000"
    }}>
    {questionStep === 'intro' && (
        <>
          <p style={{ fontSize: "16px", marginBottom: "20px" }}>
            üí¨ –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ <b>—Ç–æ—á–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞</b> –∏ –ø–æ–Ω—è—Ç—å, —Å –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª—É—á—à–µ –Ω–∞ –Ω–µ–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å.  
            –û—á–µ–Ω—å –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Ç—ã —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Å–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.  
            –¢–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, –≤ —á—ë–º —Å—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞.  
          </p>
          <button onClick={() => setQuestionStep('select')}>–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å</button>
          <div className="button-row" style={{ marginTop: "20px" }}>
            <button onClick={() => setShowQuestions(false)}>–û—Ç–º–µ–Ω–∞</button>
          </div>
        </>
      )}

      {questionStep === 'select' && (
        <>
          <p style={{ marginBottom: "20px", fontSize: "16px" }}>
            üß≠ –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.  
            <b>–ö –∫–∞–∫–æ–π –∏–∑ —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è?</b>  
            –í—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É ‚Äî —Ç—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ.
          </p>
          <div className="button-column">
            <button onClick={() => {
              setAnswers([true, false, false, false, false, false, false]);
              setQueryResult({
                interpretation: "üî¥ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                todayPerception: "üëâ –°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
                queryOrganicity: ["üå± –≠—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–±—è —Ç–µ–º–∞"],
                growthVector: "‚û°Ô∏è –¢—ã –Ω–µ–º–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –Ω–∞–∑–∞–¥, –Ω–æ –≤—Å—ë –µ—â—ë –≤ –ø–æ—Ç–æ–∫–µ"
              });
              setQuestionStep('result');
            }}>
              üî¥ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            </button>
            <button onClick={() => {
              setAnswers([false, true, false, false, false, false, false]);
              setQueryResult({
                interpretation: "üü† –≠–º–æ—Ü–∏–∏, –∂–µ–ª–∞–Ω–∏—è",
                todayPerception: "üëâ –°–µ–≥–æ–¥–Ω—è —ç—Ç–æ –º–æ–∂–µ—Ç –æ—â—É—â–∞—Ç—å—Å—è —è—Ä—á–µ, —á–µ–º –µ—Å—Ç—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ",
                queryOrganicity: ["üå± –≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–≤–æ—è —Ç–µ–º–∞"],
                growthVector: "‚û°Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –æ—â—É—â–∞—Ç—å—Å—è –∫–∞–∫ –≤—ã–∑–æ–≤ ‚Äî –Ω–æ –æ–Ω –≤ –≤–µ—Ä–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"
              });
              setQuestionStep('result');
            }}>
              üü† –≠–º–æ—Ü–∏–∏, –∂–µ–ª–∞–Ω–∏—è
            </button>
            <button onClick={() => {
              setAnswers([false, false, true, false, false, false, false]);
              setQueryResult({
                interpretation: "üü° –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–∏–ª–∞ –≤–æ–ª–∏",
                todayPerception: "üëâ –°–µ–≥–æ–¥–Ω—è —Ç—ã –≤–∏–¥–∏—à—å —Å–∏—Ç—É–∞—Ü–∏—é –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∑–≤–æ",
                queryOrganicity: ["üå± –≠—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–±—è —Ç–µ–º–∞"],
                growthVector: "‚û°Ô∏è –¢—ã –≤ —Ç–æ—á–∫–µ ‚Äî —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–≤–æ–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"
              });
              setQuestionStep('result');
            }}>
              üü° –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–∏–ª–∞ –≤–æ–ª–∏
            </button>
            <button onClick={() => {
              setAnswers([false, false, false, true, false, false, false]);
              setQueryResult({
                interpretation: "üü¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è, —á—É–≤—Å—Ç–≤–∞",
                todayPerception: "üëâ –°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ —É–≤–µ—Ä–µ–Ω–∞ –≤ —Å–µ–±–µ",
                queryOrganicity: ["üå± –≠—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–±—è —Ç–µ–º–∞"],
                growthVector: "‚û°Ô∏è –ü–æ–∫–∞ —ç—Ç–æ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ —Ç–≤–æ–µ–≥–æ –≥–æ–¥–∞"
              });
              setQuestionStep('result');
            }}>
              üü¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è, —á—É–≤—Å—Ç–≤–∞
            </button>
            <button onClick={() => {
              setAnswers([false, false, false, false, true, false, false]);
              setQueryResult({
                interpretation: "üîµ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
                todayPerception: "üëâ –¢—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å –≤—Å—ë –¥–æ–≤–æ–ª—å–Ω–æ —è—Å–Ω–æ",
                queryOrganicity: ["üå± –≠—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–±—è —Ç–µ–º–∞"],
                growthVector: "‚û°Ô∏è –≠—Ç–æ –≤ —Ñ–æ–∫—É—Å–µ ‚Äî —Ö–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ç–∞–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
              });
              setQuestionStep('result');
            }}>
              üîµ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            </button>
            <button onClick={() => {
              setAnswers([false, false, false, false, false, true, false]);
              setQueryResult({
                interpretation: "üü£ –ò–Ω—Ç—É–∏—Ü–∏—è, –æ–±—Ä–∞–∑—ã",
                todayPerception: "üëâ –ï—Å—Ç—å —à–∞–Ω—Å –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç—å –≥–ª—É–±–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞",
                queryOrganicity: ["üå± –≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–≤–æ—è –ø—Ä–∏–≤—ã—á–Ω–∞—è –∑–æ–Ω–∞"],
                growthVector: "‚û°Ô∏è –≠—Ç–æ —à–∞–≥ –≤–≤–µ—Ä—Ö ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–æ—Å—Ç–æ, –Ω–æ –≤–µ—Ä–Ω–æ"
              });
              setQuestionStep('result');
            }}>
              üü£ –ò–Ω—Ç—É–∏—Ü–∏—è, –æ–±—Ä–∞–∑—ã
            </button>
            <button onClick={() => {
              setAnswers([false, false, false, false, false, false, true]);
              setQueryResult({
                interpretation: "‚ö™ –ï–¥–∏–Ω—Å—Ç–≤–æ, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å",
                todayPerception: "üëâ –¢–≤–æ—ë –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å—É—Ç—å—é –≤–æ–ø—Ä–æ—Å–∞",
                queryOrganicity: ["üå± –≠—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–±—è —Ç–µ–º–∞"],
                growthVector: "‚û°Ô∏è –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –æ —Å–∞–º–æ–º –≥–ª–∞–≤–Ω–æ–º ‚Äî —Ç—ã –≥–æ—Ç–æ–≤–∞ –∫ –Ω–µ–º—É"
              });
              setQuestionStep('result');
            }}>
              ‚ö™ –ï–¥–∏–Ω—Å—Ç–≤–æ, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å
            </button>
          </div>
        </>
      )}

      {questionStep === 'result' && queryResult && (
        <>
          <p style={{ fontSize: "16px", fontWeight: "bold", marginBottom: "10px" }}>üß© –û—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å</p>
          <p style={{ marginBottom: "20px" }}>
            üí° –í–æ–ø—Ä–æ—Å –ø—Ä–æ: {queryResult.interpretation}
            <br /><br />
            –°–µ–≥–æ–¥–Ω—è: {queryResult.todayPerception}
            <br />
            –≠—Ç–æ –¥–ª—è —Ç–µ–±—è: {queryResult.queryOrganicity[0]}
            <br />
            –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {queryResult.growthVector}
          </p>
          <div className="button-row">
            <button onClick={() => {
              setShowQuestions(false);
              setQuestionStep('intro');
            }}>–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        </>
      )}
    </div>
  </div>
)}
        </div>
    );
}

export default App;
